CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2690 v3 @ 2.60GHz
    Hardware threads: 12
    Total Memory: 57700428 kB
-------------------------------------------------------------------
Copying test data to local directory
=== Running /home/ubuntu/workspace/build/1bitsgd/release/bin/cntk configFile=/home/ubuntu/workspace/Tests/EndToEndTests/Image/AlexNet/Composite/../AlexNetCommon.cntk currentDirectory=/tmp/cntk-test-20171209080859.615414/Image/AlexNet_Composite@release_gpu/TestData RunDir=/tmp/cntk-test-20171209080859.615414/Image/AlexNet_Composite@release_gpu DataDir=/tmp/cntk-test-20171209080859.615414/Image/AlexNet_Composite@release_gpu/TestData ConfigDir=/home/ubuntu/workspace/Tests/EndToEndTests/Image/AlexNet/Composite/.. OutputDir=/tmp/cntk-test-20171209080859.615414/Image/AlexNet_Composite@release_gpu DeviceId=0 timestamping=true configFile=/home/ubuntu/workspace/Tests/EndToEndTests/Image/AlexNet/Composite/../AlexNetComposite.cntk
CNTK 2.3.1+ (HEAD b130d7, Dec  8 2017 01:52:00) at 2017/12/09 11:37:35

/home/ubuntu/workspace/build/1bitsgd/release/bin/cntk  configFile=/home/ubuntu/workspace/Tests/EndToEndTests/Image/AlexNet/Composite/../AlexNetCommon.cntk  currentDirectory=/tmp/cntk-test-20171209080859.615414/Image/AlexNet_Composite@release_gpu/TestData  RunDir=/tmp/cntk-test-20171209080859.615414/Image/AlexNet_Composite@release_gpu  DataDir=/tmp/cntk-test-20171209080859.615414/Image/AlexNet_Composite@release_gpu/TestData  ConfigDir=/home/ubuntu/workspace/Tests/EndToEndTests/Image/AlexNet/Composite/..  OutputDir=/tmp/cntk-test-20171209080859.615414/Image/AlexNet_Composite@release_gpu  DeviceId=0  timestamping=true  configFile=/home/ubuntu/workspace/Tests/EndToEndTests/Image/AlexNet/Composite/../AlexNetComposite.cntk
Changed current directory to /tmp/cntk-test-20171209080859.615414/Image/AlexNet_Composite@release_gpu/TestData
12/09/2017 11:37:36: -------------------------------------------------------------------
12/09/2017 11:37:36: Build info: 

12/09/2017 11:37:36: 		Built time: Dec  8 2017 01:46:20
12/09/2017 11:37:36: 		Last modified date: Wed Nov 15 09:27:10 2017
12/09/2017 11:37:36: 		Build type: release
12/09/2017 11:37:36: 		Build target: GPU
12/09/2017 11:37:36: 		With 1bit-SGD: yes
12/09/2017 11:37:36: 		With ASGD: yes
12/09/2017 11:37:36: 		Math lib: mkl
12/09/2017 11:37:36: 		CUDA version: 9.0.0
12/09/2017 11:37:36: 		CUDNN version: 7.0.4
12/09/2017 11:37:36: 		Build Branch: HEAD
12/09/2017 11:37:36: 		Build SHA1: b130d7735044ce6697bfb963af91445bee740c73
12/09/2017 11:37:36: 		MPI distribution: Open MPI
12/09/2017 11:37:36: 		MPI version: 1.10.7
12/09/2017 11:37:36: -------------------------------------------------------------------
12/09/2017 11:37:36: -------------------------------------------------------------------
12/09/2017 11:37:36: GPU info:

12/09/2017 11:37:36: 		Device[0]: cores = 3072; computeCapability = 5.2; type = "Tesla M60"; total memory = 8123 MB; free memory = 8112 MB
12/09/2017 11:37:36: -------------------------------------------------------------------

Configuration After Processing and Variable Resolution:

configparameters: AlexNetComposite.cntk:AddTop5Eval=[    
    action=edit
    CurModel=/tmp/cntk-test-20171209080859.615414/Image/AlexNet_Composite@release_gpu/models/AlexNet
    NewModel=/tmp/cntk-test-20171209080859.615414/Image/AlexNet_Composite@release_gpu/models/AlexNet.Top5
    editPath=/home/ubuntu/workspace/Tests/EndToEndTests/Image/AlexNet/Composite/../add_top5_layer.mel
]

configparameters: AlexNetComposite.cntk:command=Train:AddTop5Eval:Test
configparameters: AlexNetComposite.cntk:ConfigDir=/home/ubuntu/workspace/Tests/EndToEndTests/Image/AlexNet/Composite/..
configparameters: AlexNetComposite.cntk:currentDirectory=/tmp/cntk-test-20171209080859.615414/Image/AlexNet_Composite@release_gpu/TestData
configparameters: AlexNetComposite.cntk:DataDir=/tmp/cntk-test-20171209080859.615414/Image/AlexNet_Composite@release_gpu/TestData
configparameters: AlexNetComposite.cntk:deviceId=0
configparameters: AlexNetComposite.cntk:ModelDir=/tmp/cntk-test-20171209080859.615414/Image/AlexNet_Composite@release_gpu/models
configparameters: AlexNetComposite.cntk:ndlMacros=/home/ubuntu/workspace/Tests/EndToEndTests/Image/AlexNet/Composite/../Macros.ndl
configparameters: AlexNetComposite.cntk:numMBsToShowResult=100
configparameters: AlexNetComposite.cntk:OutputDir=/tmp/cntk-test-20171209080859.615414/Image/AlexNet_Composite@release_gpu
configparameters: AlexNetComposite.cntk:parallelTrain=false
configparameters: AlexNetComposite.cntk:precision=float
configparameters: AlexNetComposite.cntk:RunDir=/tmp/cntk-test-20171209080859.615414/Image/AlexNet_Composite@release_gpu
configparameters: AlexNetComposite.cntk:Test=[
    action=test
    modelPath=/tmp/cntk-test-20171209080859.615414/Image/AlexNet_Composite@release_gpu/models/AlexNet.Top5
    minibatchSize=4
     NDLNetworkBuilder=[
        networkDescription=/home/ubuntu/workspace/Tests/EndToEndTests/Image/AlexNet/Composite/../AlexNet.ndl
    ]
] [
    reader = [
        verbosity = 0
        randomize = false
        deserializers = (
            [
                type = "ImageDeserializer"
                module = "ImageReader"
                file = "/home/ubuntu/workspace/Tests/EndToEndTests/Image/AlexNet/Composite/../val_map.txt"
                input = [
                    features = [
                        transforms = (
                            [
                                type = "Crop"
                                cropType = "center"
                            ]:[
                                type = "Scale"
                                width = 227
                                height = 227
                                channels = 3
                            ]:[
                                type = "Transpose"
                            ]
                        )
                    ]
                    labels = [
                        labelDim = 1000
                    ]
                ]
            ]
        )
    ]        
]

configparameters: AlexNetComposite.cntk:timestamping=true
configparameters: AlexNetComposite.cntk:traceLevel=1
configparameters: AlexNetComposite.cntk:Train=[
    action=train
    modelPath=/tmp/cntk-test-20171209080859.615414/Image/AlexNet_Composite@release_gpu/models/AlexNet
    NDLNetworkBuilder=[
        networkDescription=/home/ubuntu/workspace/Tests/EndToEndTests/Image/AlexNet/Composite/../AlexNet.ndl
    ]
    SGD=[
        epochSize=0
        minibatchSize=4
        learningRatesPerMB=0.01*20:0.003*12:0.001*28:0.0003
        momentumPerMB=0.9
        maxEpochs=2
        gradUpdateType=None
        L2RegWeight=0.0005
        dropoutRate=0*5:0.5
        ParallelTrain=[
            parallelizationMethod=DataParallelSGD
            distributedMBReading=true
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=1
            ]
        ]
        numMBsToShowResult=100
    ]
] [
    reader = [
        verbosity = 0
        randomize = true
        randomizationWindow = 1
        deserializers = (
            [   
                type = "ImageDeserializer"
                module = "ImageReader"
                file = "/home/ubuntu/workspace/Tests/EndToEndTests/Image/AlexNet/Composite/../train_map.txt"
                input = [
                    features = [
                        transforms = (
                            [
                                type = "Crop"
                                cropType = "RandomSide"
                                sideRatio = 0.875
                                jitterType = "UniRatio"
                            ]:[
                                type = "Scale"
                                width = 227
                                height = 227
                                channels = 3
                                interpolations = "linear"
                            ]:[
                                type = "Transpose"
                            ]
                        )
                    ]
                    labels = [
                        labelDim = 1000
                    ]
                ]
            ]
        )
    ]    
]

12/09/2017 11:37:36: Commands: Train AddTop5Eval Test
12/09/2017 11:37:36: precision = "float"

12/09/2017 11:37:36: ##############################################################################
12/09/2017 11:37:36: #                                                                            #
12/09/2017 11:37:36: # Train command (train action)                                               #
12/09/2017 11:37:36: #                                                                            #
12/09/2017 11:37:36: ##############################################################################

parallelTrain option is not enabled. ParallelTrain config will be ignored.
12/09/2017 11:37:36: 
Creating virgin network.
NDLBuilder Using GPU 0
SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4
Node 'h2.W' (LearnableParameter operation): Initializating Parameter[4096 x 0] as gaussian later when dimensions are fully known.
Node 'OutputNodes.W' (LearnableParameter operation): Initializating Parameter[1000 x 0] as gaussian later when dimensions are fully known.
Node 'h2.W' (LearnableParameter operation) operation: Tensor shape was inferred as [4096 x 4096].
Node 'OutputNodes.W' (LearnableParameter operation) operation: Tensor shape was inferred as [1000 x 4096].
conv1.c: using cuDNN convolution engine for geometry: Input: 227 x 227 x 3, Output: 57 x 57 x 64, Kernel: 11 x 11 x 3, Map: 1 x 1 x 64, Stride: 4 x 4 x 3, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
pool1: using cuDNN convolution engine for geometry: Input: 57 x 57 x 64, Output: 28 x 28 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
conv2.c: using cuDNN convolution engine for geometry: Input: 28 x 28 x 64, Output: 28 x 28 x 192, Kernel: 5 x 5 x 64, Map: 1 x 1 x 192, Stride: 1 x 1 x 64, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
pool2: using cuDNN convolution engine for geometry: Input: 28 x 28 x 192, Output: 13 x 13 x 192, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
conv3.c: using cuDNN convolution engine for geometry: Input: 13 x 13 x 192, Output: 13 x 13 x 384, Kernel: 3 x 3 x 192, Map: 1 x 1 x 384, Stride: 1 x 1 x 192, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
conv4.c: using cuDNN convolution engine for geometry: Input: 13 x 13 x 384, Output: 13 x 13 x 256, Kernel: 3 x 3 x 384, Map: 1 x 1 x 256, Stride: 1 x 1 x 384, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
conv5.c: using cuDNN convolution engine for geometry: Input: 13 x 13 x 256, Output: 13 x 13 x 256, Kernel: 3 x 3 x 256, Map: 1 x 1 x 256, Stride: 1 x 1 x 256, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
pool3: using cuDNN convolution engine for geometry: Input: 13 x 13 x 256, Output: 6 x 6 x 256, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
12/09/2017 11:37:36: 
Model has 48 nodes. Using GPU 0.

12/09/2017 11:37:36: Training criterion:   ce = CrossEntropyWithSoftmax
12/09/2017 11:37:36: Evaluation criterion: err = ClassificationError


Allocating matrices for forward and/or backward propagation.

Gradient Memory Aliasing: 16 are aliased.
	h1.t (gradient) reuses h1.z (gradient)
	conv4.c (gradient) reuses conv4.z (gradient)
	OutputNodes.t (gradient) reuses OutputNodes.z (gradient)
	conv3.c (gradient) reuses conv3.z (gradient)
	conv2.c (gradient) reuses conv2.z (gradient)
	h2.t (gradient) reuses h2.z (gradient)
	conv1.c (gradient) reuses conv1.z (gradient)
	conv5.c (gradient) reuses conv5.z (gradient)

Memory Sharing: Out of 93 matrices, 64 are shared as 12, and 29 are not shared.

Here are the ones that share memory:
	{ OutputNodes.z : [1000 x *]
	  conv1.c : [57 x 57 x 64 x *] (gradient)
	  conv1.z : [57 x 57 x 64 x *]
	  conv1.z : [57 x 57 x 64 x *] (gradient)
	  conv2.y : [28 x 28 x 192 x *] (gradient)
	  conv2.z : [28 x 28 x 192 x *]
	  conv3.c : [13 x 13 x 384 x *] (gradient)
	  conv3.z : [13 x 13 x 384 x *]
	  conv3.z : [13 x 13 x 384 x *] (gradient)
	  conv4.c : [13 x 13 x 256 x *] (gradient)
	  conv4.z : [13 x 13 x 256 x *] (gradient)
	  conv5.c : [13 x 13 x 256 x *] (gradient)
	  conv5.z : [13 x 13 x 256 x *]
	  conv5.z : [13 x 13 x 256 x *] (gradient)
	  h1.y : [4096 x *] (gradient)
	  h2.t : [4096 x *] (gradient)
	  h2.z : [4096 x *]
	  h2.z : [4096 x *] (gradient)
	  h2_d : [4096 x *] (gradient)
	  pool3 : [6 x 6 x 256 x *] (gradient) }
	{ conv1.W : [64 x 363] (gradient)
	  conv1.y : [57 x 57 x 64 x *] }
	{ conv1.b : [1 x 1 x 64] (gradient)
	  conv1.c : [57 x 57 x 64 x *]
	  conv1.y : [57 x 57 x 64 x *] (gradient)
	  conv2.c : [28 x 28 x 192 x *]
	  conv2.c : [28 x 28 x 192 x *] (gradient)
	  conv2.z : [28 x 28 x 192 x *] (gradient)
	  conv3.c : [13 x 13 x 384 x *]
	  conv3.y : [13 x 13 x 384 x *] }
	{ conv2.W : [192 x 1600] (gradient)
	  conv2.y : [28 x 28 x 192 x *] }
	{ conv3.y : [13 x 13 x 384 x *] (gradient)
	  conv4.y : [13 x 13 x 256 x *] (gradient)
	  conv4.z : [13 x 13 x 256 x *]
	  conv5.c : [13 x 13 x 256 x *]
	  conv5.y : [13 x 13 x 256 x *]
	  pool1 : [28 x 28 x 64 x *] (gradient) }
	{ conv4.W : [256 x 3456] (gradient)
	  conv4.c : [13 x 13 x 256 x *]
	  conv4.y : [13 x 13 x 256 x *] }
	{ conv2.b : [1 x 1 x 192] (gradient)
	  conv5.y : [13 x 13 x 256 x *] (gradient)
	  h1.t : [4096 x *]
	  h1.t : [4096 x *] (gradient)
	  h1.z : [4096 x *] (gradient)
	  h1_d : [4096 x *] (gradient)
	  h2.y : [4096 x *]
	  pool2 : [13 x 13 x 192 x *] (gradient) }
	{ conv3.W : [384 x 1728] (gradient)
	  pool3 : [6 x 6 x 256 x *] }
	{ OutputNodes.t : [1000 x *]
	  OutputNodes.t : [1000 x *] (gradient)
	  OutputNodes.z : [1000 x *] (gradient)
	  h1.W : [4096 x 6 x 6 x 256] (gradient)
	  h1.z : [4096 x *]
	  h2.t : [4096 x *]
	  h2.y : [4096 x *] (gradient) }
	{ conv5.W : [256 x 2304] (gradient)
	  h1.y : [4096 x *] }
	{ h1.b : [4096] (gradient)
	  h1_d : [4096 x *] }
	{ h2.W : [4096 x 4096] (gradient)
	  h2_d : [4096 x *] }

Here are the ones that don't share memory:
	{features : [227 x 227 x 3 x *]}
	{labels : [1000 x *]}
	{conv1.W : [64 x 363]}
	{conv1.b : [1 x 1 x 64]}
	{conv2.W : [192 x 1600]}
	{conv2.b : [1 x 1 x 192]}
	{conv3.W : [384 x 1728]}
	{conv3.b : [1 x 1 x 384]}
	{conv4.W : [256 x 3456]}
	{conv4.b : [1 x 1 x 256]}
	{conv5.W : [256 x 2304]}
	{conv5.b : [1 x 1 x 256]}
	{h1.W : [4096 x 6 x 6 x 256]}
	{h1.b : [4096]}
	{h2.W : [4096 x 4096]}
	{h2.b : [4096]}
	{OutputNodes.W : [1000 x 4096]}
	{OutputNodes.b : [1000]}
	{pool2 : [13 x 13 x 192 x *]}
	{OutputNodes.W : [1000 x 4096] (gradient)}
	{h2.b : [4096] (gradient)}
	{OutputNodes.b : [1000] (gradient)}
	{conv3.b : [1 x 1 x 384] (gradient)}
	{conv5.b : [1 x 1 x 256] (gradient)}
	{conv4.b : [1 x 1 x 256] (gradient)}
	{ce : [1] (gradient)}
	{pool1 : [28 x 28 x 64 x *]}
	{ce : [1]}
	{err : [1]}


12/09/2017 11:37:36: Training 61100840 parameters in 16 out of 16 parameter tensors and 45 nodes with gradient:

12/09/2017 11:37:36: 	Node 'OutputNodes.W' (LearnableParameter operation) : [1000 x 4096]
12/09/2017 11:37:36: 	Node 'OutputNodes.b' (LearnableParameter operation) : [1000]
12/09/2017 11:37:36: 	Node 'conv1.W' (LearnableParameter operation) : [64 x 363]
12/09/2017 11:37:36: 	Node 'conv1.b' (LearnableParameter operation) : [1 x 1 x 64]
12/09/2017 11:37:36: 	Node 'conv2.W' (LearnableParameter operation) : [192 x 1600]
12/09/2017 11:37:36: 	Node 'conv2.b' (LearnableParameter operation) : [1 x 1 x 192]
12/09/2017 11:37:36: 	Node 'conv3.W' (LearnableParameter operation) : [384 x 1728]
12/09/2017 11:37:36: 	Node 'conv3.b' (LearnableParameter operation) : [1 x 1 x 384]
12/09/2017 11:37:36: 	Node 'conv4.W' (LearnableParameter operation) : [256 x 3456]
12/09/2017 11:37:36: 	Node 'conv4.b' (LearnableParameter operation) : [1 x 1 x 256]
12/09/2017 11:37:36: 	Node 'conv5.W' (LearnableParameter operation) : [256 x 2304]
12/09/2017 11:37:36: 	Node 'conv5.b' (LearnableParameter operation) : [1 x 1 x 256]
12/09/2017 11:37:36: 	Node 'h1.W' (LearnableParameter operation) : [4096 x 6 x 6 x 256]
12/09/2017 11:37:36: 	Node 'h1.b' (LearnableParameter operation) : [4096]
12/09/2017 11:37:36: 	Node 'h2.W' (LearnableParameter operation) : [4096 x 4096]
12/09/2017 11:37:36: 	Node 'h2.b' (LearnableParameter operation) : [4096]

12/09/2017 11:37:36: No PreCompute nodes found, or all already computed. Skipping pre-computation step.

12/09/2017 11:37:39: Starting Epoch 1: learning rate per sample = 0.002500  effective momentum = 0.900000  momentum as time constant = 38.0 samples

12/09/2017 11:37:39: Starting minibatch loop.
12/09/2017 11:37:43:  Epoch[ 1 of 2]-Minibatch[   1- 100]: ce = 7.60380798 * 400; err = 0.99750000 * 400; time = 4.5420s; samplesPerSecond = 88.1
12/09/2017 11:37:47:  Epoch[ 1 of 2]-Minibatch[ 101- 200]: ce = 7.00307556 * 400; err = 0.99750000 * 400; time = 3.8032s; samplesPerSecond = 105.2
12/09/2017 11:37:49: Finished Epoch[ 1 of 2]: [Training] ce = 7.22174644 * 1024; err = 0.99804688 * 1024; totalSamplesSeen = 1024; learningRatePerSample = 0.0024999999; epochTime=10.3432s
12/09/2017 11:37:51: SGD: Saving checkpoint model '/tmp/cntk-test-20171209080859.615414/Image/AlexNet_Composite@release_gpu/models/AlexNet.1'

12/09/2017 11:37:53: Starting Epoch 2: learning rate per sample = 0.002500  effective momentum = 0.900000  momentum as time constant = 38.0 samples

12/09/2017 11:37:53: Starting minibatch loop.
12/09/2017 11:37:57:  Epoch[ 2 of 2]-Minibatch[   1- 100, 50.00%]: ce = 6.84381592 * 400; err = 1.00000000 * 400; time = 3.7703s; samplesPerSecond = 106.1
12/09/2017 11:38:01:  Epoch[ 2 of 2]-Minibatch[ 101- 200, 100.00%]: ce = 6.88811646 * 400; err = 1.00000000 * 400; time = 3.7656s; samplesPerSecond = 106.2
12/09/2017 11:38:03: Finished Epoch[ 2 of 2]: [Training] ce = 6.87172127 * 1024; err = 1.00000000 * 1024; totalSamplesSeen = 2048; learningRatePerSample = 0.0024999999; epochTime=9.64132s
12/09/2017 11:38:05: SGD: Saving checkpoint model '/tmp/cntk-test-20171209080859.615414/Image/AlexNet_Composite@release_gpu/models/AlexNet'

12/09/2017 11:38:07: Action "train" complete.


12/09/2017 11:38:07: ##############################################################################
12/09/2017 11:38:07: #                                                                            #
12/09/2017 11:38:07: # AddTop5Eval command (edit action)                                          #
12/09/2017 11:38:07: #                                                                            #
12/09/2017 11:38:07: ##############################################################################

conv1.c: using GEMM convolution engine for geometry: Input: 227 x 227 x 3, Output: 57 x 57 x 64, Kernel: 11 x 11 x 3, Map: 1 x 1 x 64, Stride: 4 x 4 x 3, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
pool1: using GEMM convolution engine for geometry: Input: 57 x 57 x 64, Output: 28 x 28 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
conv2.c: using GEMM convolution engine for geometry: Input: 28 x 28 x 64, Output: 28 x 28 x 192, Kernel: 5 x 5 x 64, Map: 1 x 1 x 192, Stride: 1 x 1 x 64, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
pool2: using GEMM convolution engine for geometry: Input: 28 x 28 x 192, Output: 13 x 13 x 192, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
conv3.c: using GEMM convolution engine for geometry: Input: 13 x 13 x 192, Output: 13 x 13 x 384, Kernel: 3 x 3 x 192, Map: 1 x 1 x 384, Stride: 1 x 1 x 192, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
conv4.c: using GEMM convolution engine for geometry: Input: 13 x 13 x 384, Output: 13 x 13 x 256, Kernel: 3 x 3 x 384, Map: 1 x 1 x 256, Stride: 1 x 1 x 384, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
conv5.c: using GEMM convolution engine for geometry: Input: 13 x 13 x 256, Output: 13 x 13 x 256, Kernel: 3 x 3 x 256, Map: 1 x 1 x 256, Stride: 1 x 1 x 256, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
pool3: using GEMM convolution engine for geometry: Input: 13 x 13 x 256, Output: 6 x 6 x 256, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

12/09/2017 11:38:13: Action "edit" complete.


12/09/2017 11:38:13: ##############################################################################
12/09/2017 11:38:13: #                                                                            #
12/09/2017 11:38:13: # Test command (test action)                                                 #
12/09/2017 11:38:13: #                                                                            #
12/09/2017 11:38:13: ##############################################################################

NDLBuilder Using GPU 0
Node 'h2.W' (LearnableParameter operation): Initializating Parameter[4096 x 0] as gaussian later when dimensions are fully known.
Node 'OutputNodes.W' (LearnableParameter operation): Initializating Parameter[1000 x 0] as gaussian later when dimensions are fully known.
Node 'h2.W' (LearnableParameter operation) operation: Tensor shape was inferred as [4096 x 4096].
Node 'OutputNodes.W' (LearnableParameter operation) operation: Tensor shape was inferred as [1000 x 4096].
conv1.c: using cuDNN convolution engine for geometry: Input: 227 x 227 x 3, Output: 57 x 57 x 64, Kernel: 11 x 11 x 3, Map: 1 x 1 x 64, Stride: 4 x 4 x 3, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
pool1: using cuDNN convolution engine for geometry: Input: 57 x 57 x 64, Output: 28 x 28 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
conv2.c: using cuDNN convolution engine for geometry: Input: 28 x 28 x 64, Output: 28 x 28 x 192, Kernel: 5 x 5 x 64, Map: 1 x 1 x 192, Stride: 1 x 1 x 64, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
pool2: using cuDNN convolution engine for geometry: Input: 28 x 28 x 192, Output: 13 x 13 x 192, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
conv3.c: using cuDNN convolution engine for geometry: Input: 13 x 13 x 192, Output: 13 x 13 x 384, Kernel: 3 x 3 x 192, Map: 1 x 1 x 384, Stride: 1 x 1 x 192, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
conv4.c: using cuDNN convolution engine for geometry: Input: 13 x 13 x 384, Output: 13 x 13 x 256, Kernel: 3 x 3 x 384, Map: 1 x 1 x 256, Stride: 1 x 1 x 384, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
conv5.c: using cuDNN convolution engine for geometry: Input: 13 x 13 x 256, Output: 13 x 13 x 256, Kernel: 3 x 3 x 256, Map: 1 x 1 x 256, Stride: 1 x 1 x 256, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
pool3: using cuDNN convolution engine for geometry: Input: 13 x 13 x 256, Output: 6 x 6 x 256, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 48 matrices, 28 are shared as 3, and 20 are not shared.

Here are the ones that share memory:
	{ OutputNodes.z : [1000 x *2]
	  conv4.z : [13 x 13 x 256 x *2]
	  conv5.c : [13 x 13 x 256 x *2]
	  conv5.y : [13 x 13 x 256 x *2]
	  h1.t : [4096 x *2]
	  h1.y : [4096 x *2]
	  h2.z : [4096 x *2]
	  h2_d : [4096 x *2]
	  pool1 : [28 x 28 x 64 x *2]
	  pool2 : [13 x 13 x 192 x *2] }
	{ conv1.c : [57 x 57 x 64 x *2]
	  conv1.y : [57 x 57 x 64 x *2]
	  conv2.z : [28 x 28 x 192 x *2]
	  conv3.z : [13 x 13 x 384 x *2]
	  conv4.c : [13 x 13 x 256 x *2]
	  h1_d : [4096 x *2] }
	{ OutputNodes.t : [1000 x *2]
	  conv1.z : [57 x 57 x 64 x *2]
	  conv2.c : [28 x 28 x 192 x *2]
	  conv2.y : [28 x 28 x 192 x *2]
	  conv3.c : [13 x 13 x 384 x *2]
	  conv3.y : [13 x 13 x 384 x *2]
	  conv4.y : [13 x 13 x 256 x *2]
	  conv5.z : [13 x 13 x 256 x *2]
	  h1.z : [4096 x *2]
	  h2.t : [4096 x *2]
	  h2.y : [4096 x *2]
	  pool3 : [6 x 6 x 256 x *2] }

Here are the ones that don't share memory:
	{err : [1]}
	{h2.b : [4096]}
	{conv2.W : [192 x 1600]}
	{conv5.b : [1 x 1 x 256]}
	{conv2.b : [1 x 1 x 192]}
	{conv4.W : [256 x 3456]}
	{h1.W : [4096 x 6 x 6 x 256]}
	{h1.b : [4096]}
	{conv1.b : [1 x 1 x 64]}
	{h2.W : [4096 x 4096]}
	{conv5.W : [256 x 2304]}
	{OutputNodes.W : [1000 x 4096]}
	{OutputNodes.b : [1000]}
	{conv3.b : [1 x 1 x 384]}
	{conv4.b : [1 x 1 x 256]}
	{conv1.W : [64 x 363]}
	{features : [227 x 227 x 3 x *2]}
	{labels : [1000 x *2]}
	{conv3.W : [384 x 1728]}
	{ce : [1]}

12/09/2017 11:38:15: Minibatch[1-100]: err = 0.99750000 * 400; ce = 7.32775886 * 400
12/09/2017 11:38:15: Minibatch[101-125]: err = 1.00000000 * 100; ce = 7.35444952 * 100
12/09/2017 11:38:15: Final Results: Minibatch[1-125]: err = 0.99800000 * 500; ce = 7.33309699 * 500; perplexity = 1530.11318485

12/09/2017 11:38:15: Action "test" complete.

12/09/2017 11:38:15: __COMPLETED__