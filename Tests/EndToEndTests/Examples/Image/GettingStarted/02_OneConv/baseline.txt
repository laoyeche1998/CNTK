CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2690 v3 @ 2.60GHz
    Hardware threads: 12
    Total Memory: 57700428 kB
-------------------------------------------------------------------
=== Running /home/ubuntu/workspace/build/1bitsgd/release/bin/cntk configFile=/home/ubuntu/workspace/Tests/EndToEndTests/Examples/Image/GettingStarted/02_OneConv/../../../../../../Examples/Image/GettingStarted/02_OneConv.cntk currentDirectory=/home/ubuntu/workspace/Examples/Image/DataSets/MNIST RunDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/GettingStarted_02_OneConv@release_gpu DataDir=/home/ubuntu/workspace/Examples/Image/DataSets/MNIST ConfigDir=/home/ubuntu/workspace/Tests/EndToEndTests/Examples/Image/GettingStarted/02_OneConv/../../../../../../Examples/Image/GettingStarted OutputDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/GettingStarted_02_OneConv@release_gpu DeviceId=0 timestamping=true forceDeterministicAlgorithms=true stderr=- trainNetwork=[SGD=[maxEpochs=3]]
CNTK 2.3.1+ (HEAD b130d7, Dec  8 2017 01:52:00) at 2017/12/09 10:58:27

/home/ubuntu/workspace/build/1bitsgd/release/bin/cntk  configFile=/home/ubuntu/workspace/Tests/EndToEndTests/Examples/Image/GettingStarted/02_OneConv/../../../../../../Examples/Image/GettingStarted/02_OneConv.cntk  currentDirectory=/home/ubuntu/workspace/Examples/Image/DataSets/MNIST  RunDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/GettingStarted_02_OneConv@release_gpu  DataDir=/home/ubuntu/workspace/Examples/Image/DataSets/MNIST  ConfigDir=/home/ubuntu/workspace/Tests/EndToEndTests/Examples/Image/GettingStarted/02_OneConv/../../../../../../Examples/Image/GettingStarted  OutputDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/GettingStarted_02_OneConv@release_gpu  DeviceId=0  timestamping=true  forceDeterministicAlgorithms=true  stderr=-  trainNetwork=[SGD=[maxEpochs=3]]
Changed current directory to /home/ubuntu/workspace/Examples/Image/DataSets/MNIST
12/09/2017 10:58:27: Redirecting stderr to file -_trainNetwork_testNetwork.log
12/09/2017 10:58:27: -------------------------------------------------------------------
12/09/2017 10:58:27: Build info: 

12/09/2017 10:58:27: 		Built time: Dec  8 2017 01:46:20
12/09/2017 10:58:27: 		Last modified date: Wed Nov 15 09:27:10 2017
12/09/2017 10:58:27: 		Build type: release
12/09/2017 10:58:27: 		Build target: GPU
12/09/2017 10:58:27: 		With 1bit-SGD: yes
12/09/2017 10:58:27: 		With ASGD: yes
12/09/2017 10:58:27: 		Math lib: mkl
12/09/2017 10:58:27: 		CUDA version: 9.0.0
12/09/2017 10:58:27: 		CUDNN version: 7.0.4
12/09/2017 10:58:27: 		Build Branch: HEAD
12/09/2017 10:58:27: 		Build SHA1: b130d7735044ce6697bfb963af91445bee740c73
12/09/2017 10:58:27: 		MPI distribution: Open MPI
12/09/2017 10:58:27: 		MPI version: 1.10.7
12/09/2017 10:58:27: -------------------------------------------------------------------
12/09/2017 10:58:27: -------------------------------------------------------------------
12/09/2017 10:58:27: GPU info:

12/09/2017 10:58:27: 		Device[0]: cores = 3072; computeCapability = 5.2; type = "Tesla M60"; total memory = 8123 MB; free memory = 8112 MB
12/09/2017 10:58:27: -------------------------------------------------------------------

Configuration After Processing and Variable Resolution:

configparameters: 02_OneConv.cntk:command=trainNetwork:testNetwork
configparameters: 02_OneConv.cntk:ConfigDir=/home/ubuntu/workspace/Tests/EndToEndTests/Examples/Image/GettingStarted/02_OneConv/../../../../../../Examples/Image/GettingStarted
configparameters: 02_OneConv.cntk:currentDirectory=/home/ubuntu/workspace/Examples/Image/DataSets/MNIST
configparameters: 02_OneConv.cntk:dataDir=/home/ubuntu/workspace/Examples/Image/DataSets/MNIST
configparameters: 02_OneConv.cntk:deviceId=0
configparameters: 02_OneConv.cntk:forceDeterministicAlgorithms=true
configparameters: 02_OneConv.cntk:modelPath=/tmp/cntk-test-20171209080859.615414/Examples/Image/GettingStarted_02_OneConv@release_gpu/Models/02_OneConv
configparameters: 02_OneConv.cntk:outputDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/GettingStarted_02_OneConv@release_gpu
configparameters: 02_OneConv.cntk:precision=float
configparameters: 02_OneConv.cntk:rootDir=..
configparameters: 02_OneConv.cntk:RunDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/GettingStarted_02_OneConv@release_gpu
configparameters: 02_OneConv.cntk:stderr=-
configparameters: 02_OneConv.cntk:testNetwork={
    action = "test"
minibatchSize = 1024    
    reader = {
        readerType = "CNTKTextFormatReader"
        file = "/home/ubuntu/workspace/Examples/Image/DataSets/MNIST/Test-28x28_cntk_text.txt"
        input = {
            features = { dim = 784 ; format = "dense" }
            labels =   { dim = 10  ; format = "dense" }
        }
    }
}

configparameters: 02_OneConv.cntk:timestamping=true
configparameters: 02_OneConv.cntk:traceLevel=1
configparameters: 02_OneConv.cntk:trainNetwork={
    action = "train"
    BrainScriptNetworkBuilder = {
imageShape = 28:28:1                        
labelDim = 10                               
        featScale = 1/256
        Scale{f} = x => Constant(f) .* x
        model = Sequential (
            Scale {featScale} :
            ConvolutionalLayer {16, (5:5), pad = true} : ReLU : 
            MaxPoolingLayer    {(2:2), stride=(2:2)} :
            DenseLayer {64} : ReLU : 
            LinearLayer {labelDim}
        )
        features = Input {imageShape}
        labels = Input (labelDim)
        ol = model (features)
        ce   = CrossEntropyWithSoftmax (labels, ol)
        errs = ClassificationError (labels, ol)
        featureNodes    = (features)
        labelNodes      = (labels)
        criterionNodes  = (ce)
        evaluationNodes = (errs)
        outputNodes     = (ol)
    }
    SGD = {
        epochSize = 60000
        minibatchSize = 64
        maxEpochs = 15
        learningRatesPerSample = 0.001*5:0.0005
        momentumAsTimeConstant = 0
        numMBsToShowResult = 500
    }
    reader = {
        readerType = "CNTKTextFormatReader"
        file = "/home/ubuntu/workspace/Examples/Image/DataSets/MNIST/Train-28x28_cntk_text.txt"
        input = {
            features = { dim = 784 ; format = "dense" }
            labels =   { dim = 10  ; format = "dense" }
        }
    }   
} [SGD=[maxEpochs=3]]

12/09/2017 10:58:27: Commands: trainNetwork testNetwork
12/09/2017 10:58:27: precision = "float"
12/09/2017 10:58:27: WARNING: forceDeterministicAlgorithms flag is specified. Using 1 CPU thread for processing.

12/09/2017 10:58:27: ##############################################################################
12/09/2017 10:58:27: #                                                                            #
12/09/2017 10:58:27: # trainNetwork command (train action)                                        #
12/09/2017 10:58:27: #                                                                            #
12/09/2017 10:58:27: ##############################################################################

12/09/2017 10:58:27: 
Creating virgin network.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[10 x 0] as glorotUniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[64 x 0] as glorotUniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[5 x 5 x 0 x 16] as glorotUniform later when dimensions are fully known.

Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ClassificationError()
	ol = Plus()

Validating network. 21 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> model.arrayOfFunctions[6].W = LearnableParameter() :  -> [10 x 0]
Validating --> model.arrayOfFunctions[4].arrayOfFunctions[0].W = LearnableParameter() :  -> [64 x 0]
Validating --> model.arrayOfFunctions[1].W = LearnableParameter() :  -> [5 x 5 x 0 x 16]
Validating --> ol.x._.x.x._.x.ElementTimesArgs[0] = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> ol.x._.x.x._.x = ElementTimes (ol.x._.x.x._.x.ElementTimesArgs[0], features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Node 'model.arrayOfFunctions[1].W' (LearnableParameter operation) operation: Tensor shape was inferred as [5 x 5 x 1 x 16].
Node 'model.arrayOfFunctions[1].W' (LearnableParameter operation): Initializing Parameter[5 x 5 x 1 x 16] <- glorotUniform(seed=3, init dims=[400 x 25], range=0.118818(0.118818*1.000000), onCPU=true.
)Validating --> ol.x._.x.x._.c = Convolution (model.arrayOfFunctions[1].W, ol.x._.x.x._.x) : [5 x 5 x 1 x 16], [28 x 28 x 1 x *] -> [28 x 28 x 16 x *]
Validating --> model.arrayOfFunctions[1].b = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> ol.x._.x.x._.res.x = Plus (ol.x._.x.x._.c, model.arrayOfFunctions[1].b) : [28 x 28 x 16 x *], [1 x 1 x 16] -> [28 x 28 x 16 x *]
Validating --> ol.x._.x.x = RectifiedLinear (ol.x._.x.x._.res.x) : [28 x 28 x 16 x *] -> [28 x 28 x 16 x *]
Validating --> _ol.x._.x = Pooling (ol.x._.x.x) : [28 x 28 x 16 x *] -> [14 x 14 x 16 x *]
Node 'model.arrayOfFunctions[4].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 14 x 14 x 16].
Node 'model.arrayOfFunctions[4].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[64 x 14 x 14 x 16] <- glorotUniform(seed=2, init dims=[64 x 3136], range=0.043301(0.043301*1.000000), onCPU=true.
)Validating --> ol.x._.x.PlusArgs[0] = Times (model.arrayOfFunctions[4].arrayOfFunctions[0].W, _ol.x._.x) : [64 x 14 x 14 x 16], [14 x 14 x 16 x *] -> [64 x *]
Validating --> model.arrayOfFunctions[4].arrayOfFunctions[0].b = LearnableParameter() :  -> [64]
Validating --> ol.x._.x = Plus (ol.x._.x.PlusArgs[0], model.arrayOfFunctions[4].arrayOfFunctions[0].b) : [64 x *], [64] -> [64 x *]
Validating --> ol.x = RectifiedLinear (ol.x._.x) : [64 x *] -> [64 x *]
Node 'model.arrayOfFunctions[6].W' (LearnableParameter operation) operation: Tensor shape was inferred as [10 x 64].
Node 'model.arrayOfFunctions[6].W' (LearnableParameter operation): Initializing Parameter[10 x 64] <- glorotUniform(seed=1, init dims=[10 x 64], range=0.284747(0.284747*1.000000), onCPU=true.
)Validating --> ol.PlusArgs[0] = Times (model.arrayOfFunctions[6].W, ol.x) : [10 x 64], [64 x *] -> [10 x *]
Validating --> model.arrayOfFunctions[6].b = LearnableParameter() :  -> [10]
Validating --> ol = Plus (ol.PlusArgs[0], model.arrayOfFunctions[6].b) : [10 x *], [10] -> [10 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol) : [10 x *], [10 x *] -> [1]
Validating --> errs = ClassificationError (labels, ol) : [10 x *], [10 x *] -> [1]

Validating network. 12 nodes to process in pass 2.


Validating network, final pass.

ol.x._.x.x._.c: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 16, Stride: 1 x 1 x 1, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
_ol.x._.x: using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.



Post-processing network complete.

12/09/2017 10:58:28: 
Model has 21 nodes. Using GPU 0.

12/09/2017 10:58:28: Training criterion:   ce = CrossEntropyWithSoftmax
12/09/2017 10:58:28: Evaluation criterion: errs = ClassificationError


Allocating matrices for forward and/or backward propagation.

Gradient Memory Aliasing: 6 are aliased.
	ol.x._.x.x._.c (gradient) reuses ol.x._.x.x._.res.x (gradient)
	ol.x._.x.PlusArgs[0] (gradient) reuses ol.x._.x (gradient)
	ol.PlusArgs[0] (gradient) reuses ol (gradient)

Memory Sharing: Out of 37 matrices, 21 are shared as 5, and 16 are not shared.

Here are the ones that share memory:
	{ model.arrayOfFunctions[4].arrayOfFunctions[0].W : [64 x 14 x 14 x 16] (gradient)
	  ol.x : [64 x *] }
	{ model.arrayOfFunctions[1].W : [5 x 5 x 1 x 16] (gradient)
	  ol.x._.x.x : [28 x 28 x 16 x *]
	  ol.x._.x.x._.c : [28 x 28 x 16 x *] }
	{ _ol.x._.x : [14 x 14 x 16 x *]
	  ol.x._.x.x._.c : [28 x 28 x 16 x *] (gradient)
	  ol.x._.x.x._.res.x : [28 x 28 x 16 x *]
	  ol.x._.x.x._.res.x : [28 x 28 x 16 x *] (gradient) }
	{ model.arrayOfFunctions[1].b : [1 x 1 x 16] (gradient)
	  ol : [10 x *] (gradient)
	  ol.PlusArgs[0] : [10 x *]
	  ol.PlusArgs[0] : [10 x *] (gradient)
	  ol.x._.x : [64 x *]
	  ol.x._.x : [64 x *] (gradient)
	  ol.x._.x.PlusArgs[0] : [64 x *] (gradient)
	  ol.x._.x.x : [28 x 28 x 16 x *] (gradient) }
	{ _ol.x._.x : [14 x 14 x 16 x *] (gradient)
	  ol : [10 x *]
	  ol.x : [64 x *] (gradient)
	  ol.x._.x.PlusArgs[0] : [64 x *] }

Here are the ones that don't share memory:
	{ce : [1]}
	{errs : [1]}
	{model.arrayOfFunctions[6].W : [10 x 64] (gradient)}
	{ce : [1] (gradient)}
	{model.arrayOfFunctions[6].b : [10] (gradient)}
	{model.arrayOfFunctions[4].arrayOfFunctions[0].b : [64] (gradient)}
	{ol.x._.x.x._.x : [28 x 28 x 1 x *]}
	{model.arrayOfFunctions[1].b : [1 x 1 x 16]}
	{ol.x._.x.x._.x.ElementTimesArgs[0] : [1 x 1]}
	{features : [28 x 28 x 1 x *]}
	{model.arrayOfFunctions[1].W : [5 x 5 x 1 x 16]}
	{model.arrayOfFunctions[6].b : [10]}
	{model.arrayOfFunctions[6].W : [10 x 64]}
	{model.arrayOfFunctions[4].arrayOfFunctions[0].b : [64]}
	{model.arrayOfFunctions[4].arrayOfFunctions[0].W : [64 x 14 x 14 x 16]}
	{labels : [10 x *]}


12/09/2017 10:58:28: Training 201834 parameters in 6 out of 6 parameter tensors and 16 nodes with gradient:

12/09/2017 10:58:28: 	Node 'model.arrayOfFunctions[1].W' (LearnableParameter operation) : [5 x 5 x 1 x 16]
12/09/2017 10:58:28: 	Node 'model.arrayOfFunctions[1].b' (LearnableParameter operation) : [1 x 1 x 16]
12/09/2017 10:58:28: 	Node 'model.arrayOfFunctions[4].arrayOfFunctions[0].W' (LearnableParameter operation) : [64 x 14 x 14 x 16]
12/09/2017 10:58:28: 	Node 'model.arrayOfFunctions[4].arrayOfFunctions[0].b' (LearnableParameter operation) : [64]
12/09/2017 10:58:28: 	Node 'model.arrayOfFunctions[6].W' (LearnableParameter operation) : [10 x 64]
12/09/2017 10:58:28: 	Node 'model.arrayOfFunctions[6].b' (LearnableParameter operation) : [10]

12/09/2017 10:58:28: No PreCompute nodes found, or all already computed. Skipping pre-computation step.

12/09/2017 10:58:28: Starting Epoch 1: learning rate per sample = 0.001000  effective momentum = 0.000000  momentum as time constant = 0.0 samples

12/09/2017 10:58:28: Starting minibatch loop.
12/09/2017 10:58:30:  Epoch[ 1 of 3]-Minibatch[   1- 500, 53.33%]: ce = 0.43971494 * 32000; errs = 13.037% * 32000; time = 2.1855s; samplesPerSecond = 14641.9
12/09/2017 10:58:30: Finished Epoch[ 1 of 3]: [Training] ce = 0.31389502 * 60000; errs = 9.313% * 60000; totalSamplesSeen = 60000; learningRatePerSample = 0.001; epochTime=2.74692s
12/09/2017 10:58:30: SGD: Saving checkpoint model '/tmp/cntk-test-20171209080859.615414/Examples/Image/GettingStarted_02_OneConv@release_gpu/Models/02_OneConv.1'

12/09/2017 10:58:30: Starting Epoch 2: learning rate per sample = 0.001000  effective momentum = 0.000000  momentum as time constant = 0.0 samples

12/09/2017 10:58:30: Starting minibatch loop.
12/09/2017 10:58:31:  Epoch[ 2 of 3]-Minibatch[   1- 500, 53.33%]: ce = 0.11567441 * 32000; errs = 3.509% * 32000; time = 0.6326s; samplesPerSecond = 50581.8
12/09/2017 10:58:32: Finished Epoch[ 2 of 3]: [Training] ce = 0.10652208 * 60000; errs = 3.183% * 60000; totalSamplesSeen = 120000; learningRatePerSample = 0.001; epochTime=1.22508s
12/09/2017 10:58:32: SGD: Saving checkpoint model '/tmp/cntk-test-20171209080859.615414/Examples/Image/GettingStarted_02_OneConv@release_gpu/Models/02_OneConv.2'

12/09/2017 10:58:32: Starting Epoch 3: learning rate per sample = 0.001000  effective momentum = 0.000000  momentum as time constant = 0.0 samples

12/09/2017 10:58:32: Starting minibatch loop.
12/09/2017 10:58:32:  Epoch[ 3 of 3]-Minibatch[   1- 500, 53.33%]: ce = 0.07106593 * 32000; errs = 2.109% * 32000; time = 0.6595s; samplesPerSecond = 48524.8
12/09/2017 10:58:33: Finished Epoch[ 3 of 3]: [Training] ce = 0.06903455 * 60000; errs = 2.040% * 60000; totalSamplesSeen = 180000; learningRatePerSample = 0.001; epochTime=1.22009s
12/09/2017 10:58:33: SGD: Saving checkpoint model '/tmp/cntk-test-20171209080859.615414/Examples/Image/GettingStarted_02_OneConv@release_gpu/Models/02_OneConv'

12/09/2017 10:58:33: Action "train" complete.


12/09/2017 10:58:33: ##############################################################################
12/09/2017 10:58:33: #                                                                            #
12/09/2017 10:58:33: # testNetwork command (test action)                                          #
12/09/2017 10:58:33: #                                                                            #
12/09/2017 10:58:33: ##############################################################################


Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ClassificationError()
	ol = Plus()

Validating network. 21 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> model.arrayOfFunctions[6].W = LearnableParameter() :  -> [10 x 64]
Validating --> model.arrayOfFunctions[4].arrayOfFunctions[0].W = LearnableParameter() :  -> [64 x 14 x 14 x 16]
Validating --> model.arrayOfFunctions[1].W = LearnableParameter() :  -> [5 x 5 x 1 x 16]
Validating --> ol.x._.x.x._.x.ElementTimesArgs[0] = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *1]
Validating --> ol.x._.x.x._.x = ElementTimes (ol.x._.x.x._.x.ElementTimesArgs[0], features) : [1 x 1], [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> ol.x._.x.x._.c = Convolution (model.arrayOfFunctions[1].W, ol.x._.x.x._.x) : [5 x 5 x 1 x 16], [28 x 28 x 1 x *1] -> [28 x 28 x 16 x *1]
Validating --> model.arrayOfFunctions[1].b = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> ol.x._.x.x._.res.x = Plus (ol.x._.x.x._.c, model.arrayOfFunctions[1].b) : [28 x 28 x 16 x *1], [1 x 1 x 16] -> [28 x 28 x 16 x *1]
Validating --> ol.x._.x.x = RectifiedLinear (ol.x._.x.x._.res.x) : [28 x 28 x 16 x *1] -> [28 x 28 x 16 x *1]
Validating --> _ol.x._.x = Pooling (ol.x._.x.x) : [28 x 28 x 16 x *1] -> [14 x 14 x 16 x *1]
Validating --> ol.x._.x.PlusArgs[0] = Times (model.arrayOfFunctions[4].arrayOfFunctions[0].W, _ol.x._.x) : [64 x 14 x 14 x 16], [14 x 14 x 16 x *1] -> [64 x *1]
Validating --> model.arrayOfFunctions[4].arrayOfFunctions[0].b = LearnableParameter() :  -> [64]
Validating --> ol.x._.x = Plus (ol.x._.x.PlusArgs[0], model.arrayOfFunctions[4].arrayOfFunctions[0].b) : [64 x *1], [64] -> [64 x *1]
Validating --> ol.x = RectifiedLinear (ol.x._.x) : [64 x *1] -> [64 x *1]
Validating --> ol.PlusArgs[0] = Times (model.arrayOfFunctions[6].W, ol.x) : [10 x 64], [64 x *1] -> [10 x *1]
Validating --> model.arrayOfFunctions[6].b = LearnableParameter() :  -> [10]
Validating --> ol = Plus (ol.PlusArgs[0], model.arrayOfFunctions[6].b) : [10 x *1], [10] -> [10 x *1]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol) : [10 x *1], [10 x *1] -> [1]
Validating --> errs = ClassificationError (labels, ol) : [10 x *1], [10 x *1] -> [1]

Validating network. 12 nodes to process in pass 2.


Validating network, final pass.

ol.x._.x.x._.c: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 16, Stride: 1 x 1 x 1, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
_ol.x._.x: using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.



Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 21 matrices, 10 are shared as 2, and 11 are not shared.

Here are the ones that share memory:
	{ ol : [10 x *1]
	  ol.x : [64 x *1]
	  ol.x._.x.PlusArgs[0] : [64 x *1]
	  ol.x._.x.x : [28 x 28 x 16 x *1]
	  ol.x._.x.x._.c : [28 x 28 x 16 x *1] }
	{ _ol.x._.x : [14 x 14 x 16 x *1]
	  ol.PlusArgs[0] : [10 x *1]
	  ol.x._.x : [64 x *1]
	  ol.x._.x.x._.res.x : [28 x 28 x 16 x *1]
	  ol.x._.x.x._.x : [28 x 28 x 1 x *1] }

Here are the ones that don't share memory:
	{model.arrayOfFunctions[6].b : [10]}
	{model.arrayOfFunctions[1].W : [5 x 5 x 1 x 16]}
	{ol.x._.x.x._.x.ElementTimesArgs[0] : [1 x 1]}
	{features : [28 x 28 x 1 x *1]}
	{errs : [1]}
	{ce : [1]}
	{model.arrayOfFunctions[4].arrayOfFunctions[0].W : [64 x 14 x 14 x 16]}
	{labels : [10 x *1]}
	{model.arrayOfFunctions[1].b : [1 x 1 x 16]}
	{model.arrayOfFunctions[6].W : [10 x 64]}
	{model.arrayOfFunctions[4].arrayOfFunctions[0].b : [64]}

12/09/2017 10:58:33: Minibatch[1-10]: errs = 1.680% * 10000; ce = 0.05241708 * 10000
12/09/2017 10:58:33: Final Results: Minibatch[1-10]: errs = 1.680% * 10000; ce = 0.05241708 * 10000; perplexity = 1.05381518

12/09/2017 10:58:33: Action "test" complete.

12/09/2017 10:58:33: __COMPLETED__