CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2690 v3 @ 2.60GHz
    Hardware threads: 12
    Total Memory: 57700428 kB
-------------------------------------------------------------------
=== Running /home/ubuntu/workspace/build/1bitsgd/release/bin/cntk configFile=/home/ubuntu/workspace/Tests/EndToEndTests/Examples/Image/Regression/RegrSimple/../../../../../../Examples/Image/Regression/RegrSimple_CIFAR10.cntk currentDirectory=/tmp/cntk-test-20171209080859.615414/Examples/Image/Regression_RegrSimple@release_gpu/TestData RunDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Regression_RegrSimple@release_gpu DataDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Regression_RegrSimple@release_gpu/TestData ConfigDir=/home/ubuntu/workspace/Tests/EndToEndTests/Examples/Image/Regression/RegrSimple/../../../../../../Examples/Image/Regression OutputDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Regression_RegrSimple@release_gpu DeviceId=0 timestamping=true [command=TrainConvNet:Test] forceDeterministicAlgorithms=true stderr=-
CNTK 2.3.1+ (HEAD b130d7, Dec  8 2017 01:52:00) at 2017/12/09 10:59:05

/home/ubuntu/workspace/build/1bitsgd/release/bin/cntk  configFile=/home/ubuntu/workspace/Tests/EndToEndTests/Examples/Image/Regression/RegrSimple/../../../../../../Examples/Image/Regression/RegrSimple_CIFAR10.cntk  currentDirectory=/tmp/cntk-test-20171209080859.615414/Examples/Image/Regression_RegrSimple@release_gpu/TestData  RunDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Regression_RegrSimple@release_gpu  DataDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Regression_RegrSimple@release_gpu/TestData  ConfigDir=/home/ubuntu/workspace/Tests/EndToEndTests/Examples/Image/Regression/RegrSimple/../../../../../../Examples/Image/Regression  OutputDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Regression_RegrSimple@release_gpu  DeviceId=0  timestamping=true  [command=TrainConvNet:Test]  forceDeterministicAlgorithms=true  stderr=-
Changed current directory to /tmp/cntk-test-20171209080859.615414/Examples/Image/Regression_RegrSimple@release_gpu/TestData
12/09/2017 10:59:05: Redirecting stderr to file -_TrainConvNet_Test.log
12/09/2017 10:59:05: -------------------------------------------------------------------
12/09/2017 10:59:05: Build info: 

12/09/2017 10:59:05: 		Built time: Dec  8 2017 01:46:20
12/09/2017 10:59:05: 		Last modified date: Wed Nov 15 09:27:10 2017
12/09/2017 10:59:05: 		Build type: release
12/09/2017 10:59:05: 		Build target: GPU
12/09/2017 10:59:05: 		With 1bit-SGD: yes
12/09/2017 10:59:05: 		With ASGD: yes
12/09/2017 10:59:05: 		Math lib: mkl
12/09/2017 10:59:05: 		CUDA version: 9.0.0
12/09/2017 10:59:05: 		CUDNN version: 7.0.4
12/09/2017 10:59:05: 		Build Branch: HEAD
12/09/2017 10:59:05: 		Build SHA1: b130d7735044ce6697bfb963af91445bee740c73
12/09/2017 10:59:05: 		MPI distribution: Open MPI
12/09/2017 10:59:05: 		MPI version: 1.10.7
12/09/2017 10:59:05: -------------------------------------------------------------------
12/09/2017 10:59:05: -------------------------------------------------------------------
12/09/2017 10:59:05: GPU info:

12/09/2017 10:59:05: 		Device[0]: cores = 3072; computeCapability = 5.2; type = "Tesla M60"; total memory = 8123 MB; free memory = 8112 MB
12/09/2017 10:59:05: -------------------------------------------------------------------

Configuration After Processing and Variable Resolution:

configparameters: RegrSimple_CIFAR10.cntk:command=TrainConvNet:Test
configparameters: RegrSimple_CIFAR10.cntk:ConfigDir=/home/ubuntu/workspace/Tests/EndToEndTests/Examples/Image/Regression/RegrSimple/../../../../../../Examples/Image/Regression
configparameters: RegrSimple_CIFAR10.cntk:currentDirectory=/tmp/cntk-test-20171209080859.615414/Examples/Image/Regression_RegrSimple@release_gpu/TestData
configparameters: RegrSimple_CIFAR10.cntk:dataDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Regression_RegrSimple@release_gpu/TestData
configparameters: RegrSimple_CIFAR10.cntk:deviceId=0
configparameters: RegrSimple_CIFAR10.cntk:forceDeterministicAlgorithms=true
configparameters: RegrSimple_CIFAR10.cntk:makeMode=false
configparameters: RegrSimple_CIFAR10.cntk:modelDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Regression_RegrSimple@release_gpu/Models
configparameters: RegrSimple_CIFAR10.cntk:modelPath=/tmp/cntk-test-20171209080859.615414/Examples/Image/Regression_RegrSimple@release_gpu/Models/RegrSimple_CIFAR10.cmf
configparameters: RegrSimple_CIFAR10.cntk:outputDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Regression_RegrSimple@release_gpu
configparameters: RegrSimple_CIFAR10.cntk:rootDir=..
configparameters: RegrSimple_CIFAR10.cntk:RunDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Regression_RegrSimple@release_gpu
configparameters: RegrSimple_CIFAR10.cntk:stderr=-
configparameters: RegrSimple_CIFAR10.cntk:Test={
    action = "test"
    minibatchSize = 512
    outputNodeNames = (ol, regrLabels, rmse)
    outputPath = "/tmp/cntk-test-20171209080859.615414/Examples/Image/Regression_RegrSimple@release_gpu/RegrSimple_CIFAR10"
    reader = {
        verbosity = 0 ; randomize = false
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "/tmp/cntk-test-20171209080859.615414/Examples/Image/Regression_RegrSimple@release_gpu/TestData/test_map.txt"
            input = {
                features = { transforms = (
                    { type = "Scale" ; width = 32 ; height = 32 ; channels = 3 ; interpolations = "linear" } :
                    { type = "Transpose" }
                )}
                ignored = { labelDim = 10 }
            }
        } : {
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            file = "/tmp/cntk-test-20171209080859.615414/Examples/Image/Regression_RegrSimple@release_gpu/TestData/test_regrLabels.txt"
            input = {
                regrLabels = { dim = 3 ; format = "dense" }
            }
        })
    }
}

configparameters: RegrSimple_CIFAR10.cntk:timestamping=true
configparameters: RegrSimple_CIFAR10.cntk:traceLevel=1
configparameters: RegrSimple_CIFAR10.cntk:TrainConvNet={
    action = "train"
    BrainScriptNetworkBuilder = [
        imageShape = 32:32:3
        featScale = Constant(1/256)
        labelDim = 3
        model (features) = {
            featNorm = Scale(features, featScale)
            h1 = LinearLayer {100,      init="gaussian", initValueScale=1.5} (featNorm)
            ol = LinearLayer {labelDim, init="gaussian", initValueScale=1.5} (h1)
        }.ol
        features = Input {imageShape}
        regrLabels = Input {labelDim}
        ol = model (features)
        diff = regrLabels - ol
        sqerr = ReduceSum (diff.*diff, axis=1)
        rmse =  Sqrt (sqerr / labelDim)
        featureNodes    = (features)
        labelNodes      = (regrLabels)
        criterionNodes  = (rmse)
        evaluationNodes = (rmse)
        OutputNodes     = (ol)
    ]
    SGD = {
        epochSize = 0
        maxEpochs = 2
        minibatchSize = 128
        learningRatesPerSample = 0.0005
        momentumAsTimeConstant = 1024
        firstMBsToShowResult = 5 ; numMBsToShowResult = 50
    }
    reader = {
        verbosity = 0 ; randomize = true
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "/tmp/cntk-test-20171209080859.615414/Examples/Image/Regression_RegrSimple@release_gpu/TestData/train_map.txt"
            input = {
                features = { transforms = (
                    { type = "Scale" ; width = 32 ; height = 32 ; channels = 3 ; interpolations = "linear" } :
                    { type = "Transpose" }
                )}
                ignored = { labelDim = 10 }
            }
        } : {
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            file = "/tmp/cntk-test-20171209080859.615414/Examples/Image/Regression_RegrSimple@release_gpu/TestData/train_regrLabels.txt"
            input = {
                regrLabels = { dim = 3 ; format = "dense" }
            }
        })
    }
}

configparameters: RegrSimple_CIFAR10.cntk:Write={
    action = "write"
    minibatchSize = 1
    outputNodeNames = (ol, regrLabels, rmse)
    outputPath = "/tmp/cntk-test-20171209080859.615414/Examples/Image/Regression_RegrSimple@release_gpu/RegrSimple_CIFAR10"
    reader = {
        verbosity = 0 ; randomize = false
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "/tmp/cntk-test-20171209080859.615414/Examples/Image/Regression_RegrSimple@release_gpu/TestData/test_map.txt"
            input = {
                features = { transforms = (
                    { type = "Scale" ; width = 32 ; height = 32 ; channels = 3 ; interpolations = "linear" } :
                    { type = "Transpose" }
                )}
                ignored = { labelDim = 10 }
            }
        } : {
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            file = "/tmp/cntk-test-20171209080859.615414/Examples/Image/Regression_RegrSimple@release_gpu/TestData/test_regrLabels.txt"
            input = {
                regrLabels = { dim = 3 ; format = "dense" }
            }
        })
    }
}

12/09/2017 10:59:05: Commands: TrainConvNet Test
12/09/2017 10:59:05: precision = "float"
12/09/2017 10:59:05: WARNING: forceDeterministicAlgorithms flag is specified. Using 1 CPU thread for processing.

12/09/2017 10:59:05: ##############################################################################
12/09/2017 10:59:05: #                                                                            #
12/09/2017 10:59:05: # TrainConvNet command (train action)                                        #
12/09/2017 10:59:05: #                                                                            #
12/09/2017 10:59:05: ##############################################################################

12/09/2017 10:59:05: 
Creating virgin network.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 0] as gaussian later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[100 x 0] as gaussian later when dimensions are fully known.

Post-processing network...

1 roots:
	rmse = Sqrt()

Validating network. 18 nodes to process in pass 1.

Validating --> regrLabels = InputValue() :  -> [3 x *]
Validating --> ol.ol.W = LearnableParameter() :  -> [3 x 0]
Validating --> ol.h1.W = LearnableParameter() :  -> [100 x 0]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> ol.featNorm = ElementTimes (features, featScale) : [32 x 32 x 3 x *], [1 x 1] -> [32 x 32 x 3 x *]
Node 'ol.h1.W' (LearnableParameter operation) operation: Tensor shape was inferred as [100 x 32 x 32 x 3].
Node 'ol.h1.W' (LearnableParameter operation): Initializing Parameter[100 x 32 x 32 x 3] <- gaussian(seed=2, init dims=[100 x 3072], range=0.005413(0.003608*1.500000), onCPU=true.
)Validating --> ol.h1.PlusArgs[0] = Times (ol.h1.W, ol.featNorm) : [100 x 32 x 32 x 3], [32 x 32 x 3 x *] -> [100 x *]
Validating --> ol.h1.b = LearnableParameter() :  -> [100]
Validating --> ol.h1 = Plus (ol.h1.PlusArgs[0], ol.h1.b) : [100 x *], [100] -> [100 x *]
Node 'ol.ol.W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 100].
Node 'ol.ol.W' (LearnableParameter operation): Initializing Parameter[3 x 100] <- gaussian(seed=1, init dims=[3 x 100], range=0.030000(0.020000*1.500000), onCPU=true.
)Validating --> ol.ol.PlusArgs[0] = Times (ol.ol.W, ol.h1) : [3 x 100], [100 x *] -> [3 x *]
Validating --> ol.ol.b = LearnableParameter() :  -> [3]
Validating --> ol = Plus (ol.ol.PlusArgs[0], ol.ol.b) : [3 x *], [3] -> [3 x *]
Validating --> diff = Minus (regrLabels, ol) : [3 x *], [3 x *] -> [3 x *]
Validating --> sqerr._ = ElementTimes (diff, diff) : [3 x *], [3 x *] -> [3 x *]
Validating --> sqerr = ReduceElements (sqerr._) : [3 x *] -> [1 x *]
Validating --> _rmse.z = LearnableParameter() :  -> [1]
Validating --> rmse.z = ElementTimes (sqerr, _rmse.z) : [1 x *], [1] -> [1 x *]
Validating --> rmse = Sqrt (rmse.z) : [1 x *] -> [1 x *]

Validating network. 10 nodes to process in pass 2.


Validating network, final pass.




Post-processing network complete.

12/09/2017 10:59:06: 
Model has 18 nodes. Using GPU 0.

12/09/2017 10:59:06: Training criterion:   rmse = Sqrt


Allocating matrices for forward and/or backward propagation.

Gradient Memory Aliasing: 6 are aliased.
	regrLabels (gradient) reuses diff (gradient)
	ol.ol.PlusArgs[0] (gradient) reuses ol (gradient)
	ol.h1.PlusArgs[0] (gradient) reuses ol.h1 (gradient)

Memory Sharing: Out of 31 matrices, 21 are shared as 7, and 10 are not shared.

Here are the ones that share memory:
	{ diff : [3 x *]
	  ol.h1 : [100 x *] (gradient)
	  ol.h1.PlusArgs[0] : [100 x *]
	  ol.h1.PlusArgs[0] : [100 x *] (gradient)
	  ol.ol.PlusArgs[0] : [3 x *] }
	{ ol.h1 : [100 x *]
	  ol.h1.W : [100 x 32 x 32 x 3] (gradient) }
	{ ol : [3 x *]
	  ol : [3 x *] (gradient)
	  ol.h1.b : [100] (gradient)
	  ol.ol.PlusArgs[0] : [3 x *] (gradient)
	  rmse.z : [1 x *] (gradient)
	  sqerr._ : [3 x *] (gradient) }
	{ diff : [3 x *] (gradient)
	  sqerr._ : [3 x *] }
	{ ol.ol.W : [3 x 100] (gradient)
	  sqerr : [1 x *] (gradient) }
	{ rmse : [1 x *] (gradient)
	  rmse.z : [1 x *] }
	{ ol.ol.b : [3] (gradient)
	  sqerr : [1 x *] }

Here are the ones that don't share memory:
	{ol.featNorm : [32 x 32 x 3 x *]}
	{featScale : [1 x 1]}
	{ol.ol.b : [3]}
	{_rmse.z : [1]}
	{ol.h1.b : [100]}
	{ol.ol.W : [3 x 100]}
	{ol.h1.W : [100 x 32 x 32 x 3]}
	{features : [32 x 32 x 3 x *]}
	{rmse : [1 x *]}
	{regrLabels : [3 x *]}


12/09/2017 10:59:06: Training 307603 parameters in 4 out of 4 parameter tensors and 13 nodes with gradient:

12/09/2017 10:59:06: 	Node 'ol.h1.W' (LearnableParameter operation) : [100 x 32 x 32 x 3]
12/09/2017 10:59:06: 	Node 'ol.h1.b' (LearnableParameter operation) : [100]
12/09/2017 10:59:06: 	Node 'ol.ol.W' (LearnableParameter operation) : [3 x 100]
12/09/2017 10:59:06: 	Node 'ol.ol.b' (LearnableParameter operation) : [3]

12/09/2017 10:59:06: No PreCompute nodes found, or all already computed. Skipping pre-computation step.

12/09/2017 10:59:06: Starting Epoch 1: learning rate per sample = 0.000500  effective momentum = 0.882497  momentum as time constant = 1024.0 samples

12/09/2017 10:59:06: Starting minibatch loop.
12/09/2017 10:59:06:  Epoch[ 1 of 2]-Minibatch[   1-   1]: rmse = 0.48214805 * 128; time = 0.2003s; samplesPerSecond = 638.9
12/09/2017 10:59:06:  Epoch[ 1 of 2]-Minibatch[   2-   2]: rmse = 0.33824027 * 128; time = 0.0006s; samplesPerSecond = 226388.4
12/09/2017 10:59:06:  Epoch[ 1 of 2]-Minibatch[   3-   3]: rmse = 0.07429606 * 128; time = 0.0142s; samplesPerSecond = 9007.1
12/09/2017 10:59:06:  Epoch[ 1 of 2]-Minibatch[   4-   4]: rmse = 0.32210892 * 128; time = 0.0126s; samplesPerSecond = 10166.0
12/09/2017 10:59:06:  Epoch[ 1 of 2]-Minibatch[   5-   5]: rmse = 0.43275023 * 128; time = 0.0147s; samplesPerSecond = 8728.5
12/09/2017 10:59:07:  Epoch[ 1 of 2]-Minibatch[   6-  50]: rmse = 0.10176004 * 5760; time = 0.5660s; samplesPerSecond = 10176.6
12/09/2017 10:59:08:  Epoch[ 1 of 2]-Minibatch[  51- 100]: rmse = 0.05321239 * 6400; time = 0.6281s; samplesPerSecond = 10189.6
12/09/2017 10:59:08:  Epoch[ 1 of 2]-Minibatch[ 101- 150]: rmse = 0.03701538 * 6400; time = 0.6272s; samplesPerSecond = 10204.6
12/09/2017 10:59:09:  Epoch[ 1 of 2]-Minibatch[ 151- 200]: rmse = 0.04296219 * 6400; time = 0.6316s; samplesPerSecond = 10133.5
12/09/2017 10:59:10:  Epoch[ 1 of 2]-Minibatch[ 201- 250]: rmse = 0.03086647 * 6400; time = 0.6353s; samplesPerSecond = 10074.4
12/09/2017 10:59:10:  Epoch[ 1 of 2]-Minibatch[ 251- 300]: rmse = 0.02367117 * 6400; time = 0.6353s; samplesPerSecond = 10074.1
12/09/2017 10:59:11:  Epoch[ 1 of 2]-Minibatch[ 301- 350]: rmse = 0.02352776 * 6400; time = 0.6363s; samplesPerSecond = 10058.5
12/09/2017 10:59:11: Finished Epoch[ 1 of 2]: [Training] rmse = 0.04504658 * 50000; totalSamplesSeen = 50000; learningRatePerSample = 0.00050000002; epochTime=5.12053s
12/09/2017 10:59:11: SGD: Saving checkpoint model '/tmp/cntk-test-20171209080859.615414/Examples/Image/Regression_RegrSimple@release_gpu/Models/RegrSimple_CIFAR10.cmf.1'

12/09/2017 10:59:11: Starting Epoch 2: learning rate per sample = 0.000500  effective momentum = 0.882497  momentum as time constant = 1024.0 samples

12/09/2017 10:59:11: Starting minibatch loop.
12/09/2017 10:59:11:  Epoch[ 2 of 2]-Minibatch[   1-   1, 0.29%]: rmse = 0.01164997 * 128; time = 0.0150s; samplesPerSecond = 8546.2
12/09/2017 10:59:11:  Epoch[ 2 of 2]-Minibatch[   2-   2, 0.57%]: rmse = 0.01177765 * 128; time = 0.0123s; samplesPerSecond = 10428.0
12/09/2017 10:59:11:  Epoch[ 2 of 2]-Minibatch[   3-   3, 0.86%]: rmse = 0.01271256 * 128; time = 0.0128s; samplesPerSecond = 10036.8
12/09/2017 10:59:11:  Epoch[ 2 of 2]-Minibatch[   4-   4, 1.14%]: rmse = 0.00801622 * 128; time = 0.0135s; samplesPerSecond = 9483.9
12/09/2017 10:59:11:  Epoch[ 2 of 2]-Minibatch[   5-   5, 1.43%]: rmse = 0.01220258 * 128; time = 0.0126s; samplesPerSecond = 10177.8
12/09/2017 10:59:12:  Epoch[ 2 of 2]-Minibatch[   6-  50, 14.29%]: rmse = 0.01747004 * 5760; time = 0.5860s; samplesPerSecond = 9829.2
12/09/2017 10:59:13:  Epoch[ 2 of 2]-Minibatch[  51- 100, 28.57%]: rmse = 0.01558502 * 6400; time = 0.6369s; samplesPerSecond = 10049.2
12/09/2017 10:59:13:  Epoch[ 2 of 2]-Minibatch[ 101- 150, 42.86%]: rmse = 0.00956700 * 6400; time = 0.6335s; samplesPerSecond = 10102.2
12/09/2017 10:59:14:  Epoch[ 2 of 2]-Minibatch[ 151- 200, 57.14%]: rmse = 0.00946388 * 6400; time = 0.6353s; samplesPerSecond = 10073.6
12/09/2017 10:59:15:  Epoch[ 2 of 2]-Minibatch[ 201- 250, 71.43%]: rmse = 0.00743878 * 6400; time = 0.6969s; samplesPerSecond = 9183.9
12/09/2017 10:59:16:  Epoch[ 2 of 2]-Minibatch[ 251- 300, 85.71%]: rmse = 0.00706352 * 6400; time = 1.0552s; samplesPerSecond = 6065.2
12/09/2017 10:59:16:  Epoch[ 2 of 2]-Minibatch[ 301- 350, 100.00%]: rmse = 0.00981699 * 6400; time = 0.6995s; samplesPerSecond = 9150.0
12/09/2017 10:59:17: Finished Epoch[ 2 of 2]: [Training] rmse = 0.01079024 * 50000; totalSamplesSeen = 100000; learningRatePerSample = 0.00050000002; epochTime=5.63332s
12/09/2017 10:59:17: SGD: Saving checkpoint model '/tmp/cntk-test-20171209080859.615414/Examples/Image/Regression_RegrSimple@release_gpu/Models/RegrSimple_CIFAR10.cmf'

12/09/2017 10:59:17: Action "train" complete.


12/09/2017 10:59:17: ##############################################################################
12/09/2017 10:59:17: #                                                                            #
12/09/2017 10:59:17: # Test command (test action)                                                 #
12/09/2017 10:59:17: #                                                                            #
12/09/2017 10:59:17: ##############################################################################


Post-processing network...

1 roots:
	rmse = Sqrt()

Validating network. 18 nodes to process in pass 1.

Validating --> regrLabels = InputValue() :  -> [3 x *1]
Validating --> ol.ol.W = LearnableParameter() :  -> [3 x 100]
Validating --> ol.h1.W = LearnableParameter() :  -> [100 x 32 x 32 x 3]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *1]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> ol.featNorm = ElementTimes (features, featScale) : [32 x 32 x 3 x *1], [1 x 1] -> [32 x 32 x 3 x *1]
Validating --> ol.h1.PlusArgs[0] = Times (ol.h1.W, ol.featNorm) : [100 x 32 x 32 x 3], [32 x 32 x 3 x *1] -> [100 x *1]
Validating --> ol.h1.b = LearnableParameter() :  -> [100]
Validating --> ol.h1 = Plus (ol.h1.PlusArgs[0], ol.h1.b) : [100 x *1], [100] -> [100 x *1]
Validating --> ol.ol.PlusArgs[0] = Times (ol.ol.W, ol.h1) : [3 x 100], [100 x *1] -> [3 x *1]
Validating --> ol.ol.b = LearnableParameter() :  -> [3]
Validating --> ol = Plus (ol.ol.PlusArgs[0], ol.ol.b) : [3 x *1], [3] -> [3 x *1]
Validating --> diff = Minus (regrLabels, ol) : [3 x *1], [3 x *1] -> [3 x *1]
Validating --> sqerr._ = ElementTimes (diff, diff) : [3 x *1], [3 x *1] -> [3 x *1]
Validating --> sqerr = ReduceElements (sqerr._) : [3 x *1] -> [1 x *1]
Validating --> _rmse.z = LearnableParameter() :  -> [1]
Validating --> rmse.z = ElementTimes (sqerr, _rmse.z) : [1 x *1], [1] -> [1 x *1]
Validating --> rmse = Sqrt (rmse.z) : [1 x *1] -> [1 x *1]

Validating network. 10 nodes to process in pass 2.


Validating network, final pass.




Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 18 matrices, 9 are shared as 2, and 9 are not shared.

Here are the ones that share memory:
	{ ol : [3 x *1]
	  ol.featNorm : [32 x 32 x 3 x *1]
	  ol.h1 : [100 x *1]
	  rmse.z : [1 x *1]
	  sqerr._ : [3 x *1] }
	{ diff : [3 x *1]
	  ol.h1.PlusArgs[0] : [100 x *1]
	  ol.ol.PlusArgs[0] : [3 x *1]
	  sqerr : [1 x *1] }

Here are the ones that don't share memory:
	{ol.ol.W : [3 x 100]}
	{regrLabels : [3 x *1]}
	{ol.h1.W : [100 x 32 x 32 x 3]}
	{ol.ol.b : [3]}
	{rmse : [1 x *1]}
	{ol.h1.b : [100]}
	{featScale : [1 x 1]}
	{_rmse.z : [1]}
	{features : [32 x 32 x 3 x *1]}

12/09/2017 10:59:18: Minibatch[1-20]: rmse = 0.12757807 * 10000
12/09/2017 10:59:18: Final Results: Minibatch[1-20]: rmse = 0.12757807 * 10000

12/09/2017 10:59:18: Action "test" complete.

12/09/2017 10:59:18: __COMPLETED__