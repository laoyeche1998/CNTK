CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2690 v3 @ 2.60GHz
    Hardware threads: 12
    Total Memory: 57700428 kB
-------------------------------------------------------------------
=== Running /home/ubuntu/workspace/build/1bitsgd/release/bin/cntk configFile=/home/ubuntu/workspace/Tests/EndToEndTests/Examples/Image/Classification/ConvNet_CIFAR/ConvNetLRN_CIFAR10_DataAug/../../../../../../../Examples/Image/Classification/ConvNet/BrainScript/ConvNetLRN_CIFAR10_DataAug.cntk currentDirectory=/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNetLRN_CIFAR10_DataAug@release_gpu/TestData RunDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNetLRN_CIFAR10_DataAug@release_gpu DataDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNetLRN_CIFAR10_DataAug@release_gpu/TestData ConfigDir=/home/ubuntu/workspace/Tests/EndToEndTests/Examples/Image/Classification/ConvNet_CIFAR/ConvNetLRN_CIFAR10_DataAug/../../../../../../../Examples/Image/Classification/ConvNet/BrainScript OutputDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNetLRN_CIFAR10_DataAug@release_gpu DeviceId=0 timestamping=true forceDeterministicAlgorithms=false stderr=- TrainConvNet=[SGD=[epochSize=4096,maxEpochs=3,numMBsToShowResult=16]]
CNTK 2.3.1+ (HEAD b130d7, Dec  8 2017 01:52:00) at 2017/12/09 10:44:38

/home/ubuntu/workspace/build/1bitsgd/release/bin/cntk  configFile=/home/ubuntu/workspace/Tests/EndToEndTests/Examples/Image/Classification/ConvNet_CIFAR/ConvNetLRN_CIFAR10_DataAug/../../../../../../../Examples/Image/Classification/ConvNet/BrainScript/ConvNetLRN_CIFAR10_DataAug.cntk  currentDirectory=/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNetLRN_CIFAR10_DataAug@release_gpu/TestData  RunDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNetLRN_CIFAR10_DataAug@release_gpu  DataDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNetLRN_CIFAR10_DataAug@release_gpu/TestData  ConfigDir=/home/ubuntu/workspace/Tests/EndToEndTests/Examples/Image/Classification/ConvNet_CIFAR/ConvNetLRN_CIFAR10_DataAug/../../../../../../../Examples/Image/Classification/ConvNet/BrainScript  OutputDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNetLRN_CIFAR10_DataAug@release_gpu  DeviceId=0  timestamping=true  forceDeterministicAlgorithms=false  stderr=-  TrainConvNet=[SGD=[epochSize=4096,maxEpochs=3,numMBsToShowResult=16]]
Changed current directory to /tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNetLRN_CIFAR10_DataAug@release_gpu/TestData
12/09/2017 10:44:38: Redirecting stderr to file -_TrainConvNet_Eval.log
12/09/2017 10:44:38: -------------------------------------------------------------------
12/09/2017 10:44:38: Build info: 

12/09/2017 10:44:38: 		Built time: Dec  8 2017 01:46:20
12/09/2017 10:44:38: 		Last modified date: Wed Nov 15 09:27:10 2017
12/09/2017 10:44:38: 		Build type: release
12/09/2017 10:44:38: 		Build target: GPU
12/09/2017 10:44:38: 		With 1bit-SGD: yes
12/09/2017 10:44:38: 		With ASGD: yes
12/09/2017 10:44:38: 		Math lib: mkl
12/09/2017 10:44:38: 		CUDA version: 9.0.0
12/09/2017 10:44:38: 		CUDNN version: 7.0.4
12/09/2017 10:44:38: 		Build Branch: HEAD
12/09/2017 10:44:38: 		Build SHA1: b130d7735044ce6697bfb963af91445bee740c73
12/09/2017 10:44:38: 		MPI distribution: Open MPI
12/09/2017 10:44:38: 		MPI version: 1.10.7
12/09/2017 10:44:38: -------------------------------------------------------------------
12/09/2017 10:44:38: -------------------------------------------------------------------
12/09/2017 10:44:38: GPU info:

12/09/2017 10:44:38: 		Device[0]: cores = 3072; computeCapability = 5.2; type = "Tesla M60"; total memory = 8123 MB; free memory = 8112 MB
12/09/2017 10:44:38: -------------------------------------------------------------------

Configuration After Processing and Variable Resolution:

configparameters: ConvNetLRN_CIFAR10_DataAug.cntk:command=TrainConvNet:Eval
configparameters: ConvNetLRN_CIFAR10_DataAug.cntk:ConfigDir=/home/ubuntu/workspace/Tests/EndToEndTests/Examples/Image/Classification/ConvNet_CIFAR/ConvNetLRN_CIFAR10_DataAug/../../../../../../../Examples/Image/Classification/ConvNet/BrainScript
configparameters: ConvNetLRN_CIFAR10_DataAug.cntk:currentDirectory=/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNetLRN_CIFAR10_DataAug@release_gpu/TestData
configparameters: ConvNetLRN_CIFAR10_DataAug.cntk:dataDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNetLRN_CIFAR10_DataAug@release_gpu/TestData
configparameters: ConvNetLRN_CIFAR10_DataAug.cntk:deviceId=0
configparameters: ConvNetLRN_CIFAR10_DataAug.cntk:Eval={
    action = "eval"
evalNodeNames = errs:top5Errs  
    minibatchSize = 512
    reader = {
        verbosity = 0 ; randomize = false
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNetLRN_CIFAR10_DataAug@release_gpu/TestData/test_map.txt"
            input = {
                features = { transforms = (
                   { type = "Scale" ; width = 32 ; height = 32 ; channels = 3 ; interpolations = "linear" } :
                   { type = "Mean"; meanFile = "/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNetLRN_CIFAR10_DataAug@release_gpu/TestData/CIFAR-10_mean.xml" } : 
                   { type = "Transpose" }
                )}
                labels = { labelDim = 10 }
            }
        })
    }
}

configparameters: ConvNetLRN_CIFAR10_DataAug.cntk:forceDeterministicAlgorithms=false
configparameters: ConvNetLRN_CIFAR10_DataAug.cntk:modelPath=/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNetLRN_CIFAR10_DataAug@release_gpu/Models/ConvNetLRN_CIFAR10_DataAug
configparameters: ConvNetLRN_CIFAR10_DataAug.cntk:outputDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNetLRN_CIFAR10_DataAug@release_gpu
configparameters: ConvNetLRN_CIFAR10_DataAug.cntk:precision=float
configparameters: ConvNetLRN_CIFAR10_DataAug.cntk:rootDir=../../..
configparameters: ConvNetLRN_CIFAR10_DataAug.cntk:RunDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNetLRN_CIFAR10_DataAug@release_gpu
configparameters: ConvNetLRN_CIFAR10_DataAug.cntk:stderr=-
configparameters: ConvNetLRN_CIFAR10_DataAug.cntk:timestamping=true
configparameters: ConvNetLRN_CIFAR10_DataAug.cntk:traceLevel=1
configparameters: ConvNetLRN_CIFAR10_DataAug.cntk:TrainConvNet={
    action = "train"
    BrainScriptNetworkBuilder = {
        imageShape = 32:32:3
        labelDim = 10
        featScale = 1/256
        Normalize{f} = x => f .* x
        LRN {k, n, alpha, beta} = {
            apply (x) = {
                x2 = x .* x
                x2s = SplitDimension(x2, 3, 1) 
                W = ParameterTensor{(1:1:2*n+1:1), learningRateMultiplier = 0, initValue = alpha/(2*n+1)}
                y = Convolution (W, x2s, (1:1:2*n+1), mapDims = 1, stride = 1, sharing = true, autoPadding = true, lowerPad = 0, upperPad = 0, maxTempMemSizeInSamples = 0)
                b = FlattenDimensions(y, 3, 2)
                den = Exp (beta .* Log(k + b)) 
                r = x .* Reciprocal(den)
            }.r
        }.apply
        model = Sequential (
            Normalize {featScale} :
            ConvolutionalLayer {64, (3:3), pad = true} : ReLU : 
            ConvolutionalLayer {64, (3:3), pad = true} : ReLU : 
            LRN {1.0, 4, 0.001, 0.75} : 
            MaxPoolingLayer {(3:3), stride = (2:2)} :
            ConvolutionalLayer {64, (3:3), pad = true} : ReLU : 
            ConvolutionalLayer {64, (3:3), pad = true} : ReLU : 
            LRN {1.0, 4, 0.001, 0.75} : 
            MaxPoolingLayer {(3:3), stride = (2:2)} :
            DenseLayer {256} : ReLU : Dropout : 
            DenseLayer {128} : ReLU : Dropout : 
            LinearLayer {labelDim}
        )
        features = Input {imageShape}
        labels   = Input {labelDim}
        z = model (features)
        ce       = CrossEntropyWithSoftmax     (labels, z)
        errs     = ClassificationError         (labels, z)
top5Errs = ClassificationError         (labels, z, topN=5)  
        featureNodes    = (features)
        labelNodes      = (labels)
        criterionNodes  = (ce)
evaluationNodes = (errs)  
        outputNodes     = (z)
    }
    SGD = {
        epochSize = 0
        minibatchSize = 64
        learningRatesPerSample = 0.0015625*20:0.00046875*20:0.00015625*20:0.000046875*10:0.000015625
        momentumAsTimeConstant = 0*20:600*20:1200
        maxEpochs = 80
        L2RegWeight = 0.002
        dropoutRate = 0.5
        numMBsToShowResult = 100
    }
    reader = {
        verbosity = 0 ; randomize = true
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNetLRN_CIFAR10_DataAug@release_gpu/TestData/train_map.txt"
            input = {
                features = { transforms = (
                    { type = "Crop" ; cropType = "RandomSide" ; sideRatio = 0.8 ; jitterType = "UniRatio" } :
                    { type = "Scale" ; width = 32 ; height = 32 ; channels = 3 ; interpolations = "linear" } :
                    { type = "Mean" ; meanFile = "/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNetLRN_CIFAR10_DataAug@release_gpu/TestData/CIFAR-10_mean.xml" } : 
                    { type = "Transpose" }
                )}
                labels = { labelDim = 10 }
            }
        })
    }
} [SGD=[epochSize=4096,maxEpochs=3,numMBsToShowResult=16]]

12/09/2017 10:44:38: Commands: TrainConvNet Eval
12/09/2017 10:44:38: precision = "float"

12/09/2017 10:44:38: ##############################################################################
12/09/2017 10:44:38: #                                                                            #
12/09/2017 10:44:38: # TrainConvNet command (train action)                                        #
12/09/2017 10:44:38: #                                                                            #
12/09/2017 10:44:38: ##############################################################################

12/09/2017 10:44:38: 
Creating virgin network.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[10 x 0] as glorotUniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[128 x 0] as glorotUniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[256 x 0] as glorotUniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 0 x 64] as glorotUniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 0 x 64] as glorotUniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 0 x 64] as glorotUniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 0 x 64] as glorotUniform later when dimensions are fully known.

Post-processing network...

4 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ClassificationError()
	top5Errs = ClassificationError()
	z = Plus()

Validating network. 72 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> model.arrayOfFunctions[19].W = LearnableParameter() :  -> [10 x 0]
Validating --> model.arrayOfFunctions[16].arrayOfFunctions[0].W = LearnableParameter() :  -> [128 x 0]
Validating --> model.arrayOfFunctions[13].arrayOfFunctions[0].W = LearnableParameter() :  -> [256 x 0]
Validating --> model.arrayOfFunctions[9].W = LearnableParameter() :  -> [3 x 3 x 0 x 64]
Validating --> model.arrayOfFunctions[7].W = LearnableParameter() :  -> [3 x 3 x 0 x 64]
Validating --> model.arrayOfFunctions[3].W = LearnableParameter() :  -> [3 x 3 x 0 x 64]
Validating --> model.arrayOfFunctions[1].W = LearnableParameter() :  -> [3 x 3 x 0 x 64]
Validating --> _z.x._._.x._._.x.x.x._.x._.x.x.x._.x._.x = LearnableParameter() :  -> [1]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.x._.x._.x = ElementTimes (_z.x._._.x._._.x.x.x._.x._.x.x.x._.x._.x, features) : [1], [32 x 32 x 3 x *] -> [32 x 32 x 3 x *]
Node 'model.arrayOfFunctions[1].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 64].
Node 'model.arrayOfFunctions[1].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 64] <- glorotUniform(seed=7, init dims=[576 x 27], range=0.099751(0.099751*1.000000), onCPU=true.
)Validating --> z.x._._.x._._.x.x.x._.x._.x.x.x._.x._.c = Convolution (model.arrayOfFunctions[1].W, z.x._._.x._._.x.x.x._.x._.x.x.x._.x._.x) : [3 x 3 x 3 x 64], [32 x 32 x 3 x *] -> [32 x 32 x 64 x *]
Validating --> model.arrayOfFunctions[1].b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.x._.x._.res.x = Plus (z.x._._.x._._.x.x.x._.x._.x.x.x._.x._.c, model.arrayOfFunctions[1].b) : [32 x 32 x 64 x *], [1 x 1 x 64] -> [32 x 32 x 64 x *]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.x._.x = RectifiedLinear (z.x._._.x._._.x.x.x._.x._.x.x.x._.x._.res.x) : [32 x 32 x 64 x *] -> [32 x 32 x 64 x *]
Node 'model.arrayOfFunctions[3].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 64 x 64].
Node 'model.arrayOfFunctions[3].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 64 x 64] <- glorotUniform(seed=6, init dims=[576 x 576], range=0.072169(0.072169*1.000000), onCPU=true.
)Validating --> z.x._._.x._._.x.x.x._.x._.x.x.x._.c = Convolution (model.arrayOfFunctions[3].W, z.x._._.x._._.x.x.x._.x._.x.x.x._.x) : [3 x 3 x 64 x 64], [32 x 32 x 64 x *] -> [32 x 32 x 64 x *]
Validating --> model.arrayOfFunctions[3].b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.x._.res.x = Plus (z.x._._.x._._.x.x.x._.x._.x.x.x._.c, model.arrayOfFunctions[3].b) : [32 x 32 x 64 x *], [1 x 1 x 64] -> [32 x 32 x 64 x *]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.x = RectifiedLinear (z.x._._.x._._.x.x.x._.x._.x.x.x._.res.x) : [32 x 32 x 64 x *] -> [32 x 32 x 64 x *]
Validating --> _z.x._._.x._._.x.x.x._.x._.x.x.den._ = LearnableParameter() :  -> [1]
Validating --> _z.x._._.x._._.x.x.x._.x._.x.x.den._.ElementTimesArgs[1]._ = LearnableParameter() :  -> [1]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.W = LearnableParameter() :  -> [1 x 1 x 9 x 1]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.x2 = ElementTimes (z.x._._.x._._.x.x.x._.x._.x.x.x, z.x._._.x._._.x.x.x._.x._.x.x.x) : [32 x 32 x 64 x *], [32 x 32 x 64 x *] -> [32 x 32 x 64 x *]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.x2s = Reshape (z.x._._.x._._.x.x.x._.x._.x.x.x2) : [32 x 32 x 64 x *] -> [32 x 32 x 64 x 1 x *]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.y = Convolution (z.x._._.x._._.x.x.x._.x._.x.x.W, z.x._._.x._._.x.x.x._.x._.x.x.x2s) : [1 x 1 x 9 x 1], [32 x 32 x 64 x 1 x *] -> [32 x 32 x 64 x 1 x *]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.b = Reshape (z.x._._.x._._.x.x.x._.x._.x.x.y) : [32 x 32 x 64 x 1 x *] -> [32 x 32 x 64 x *]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.den._.ElementTimesArgs[1]._ = Plus (_z.x._._.x._._.x.x.x._.x._.x.x.den._.ElementTimesArgs[1]._, z.x._._.x._._.x.x.x._.x._.x.x.b) : [1], [32 x 32 x 64 x *] -> [32 x 32 x 64 x *]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.den._.ElementTimesArgs[1] = Log (z.x._._.x._._.x.x.x._.x._.x.x.den._.ElementTimesArgs[1]._) : [32 x 32 x 64 x *] -> [32 x 32 x 64 x *]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.den._ = ElementTimes (_z.x._._.x._._.x.x.x._.x._.x.x.den._, z.x._._.x._._.x.x.x._.x._.x.x.den._.ElementTimesArgs[1]) : [1], [32 x 32 x 64 x *] -> [32 x 32 x 64 x *]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.den = Exp (z.x._._.x._._.x.x.x._.x._.x.x.den._) : [32 x 32 x 64 x *] -> [32 x 32 x 64 x *]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.r.ElementTimesArgs[1] = Reciprocal (z.x._._.x._._.x.x.x._.x._.x.x.den) : [32 x 32 x 64 x *] -> [32 x 32 x 64 x *]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.r = ElementTimes (z.x._._.x._._.x.x.x._.x._.x.x.x, z.x._._.x._._.x.x.x._.x._.x.x.r.ElementTimesArgs[1]) : [32 x 32 x 64 x *], [32 x 32 x 64 x *] -> [32 x 32 x 64 x *]
Validating --> z.x._._.x._._.x.x.x._.x._.x = Pooling (z.x._._.x._._.x.x.x._.x._.x.x.r) : [32 x 32 x 64 x *] -> [15 x 15 x 64 x *]
Node 'model.arrayOfFunctions[7].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 64 x 64].
Node 'model.arrayOfFunctions[7].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 64 x 64] <- glorotUniform(seed=5, init dims=[576 x 576], range=0.072169(0.072169*1.000000), onCPU=true.
)Validating --> z.x._._.x._._.x.x.x._.x._.c = Convolution (model.arrayOfFunctions[7].W, z.x._._.x._._.x.x.x._.x._.x) : [3 x 3 x 64 x 64], [15 x 15 x 64 x *] -> [15 x 15 x 64 x *]
Validating --> model.arrayOfFunctions[7].b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> z.x._._.x._._.x.x.x._.x._.res.x = Plus (z.x._._.x._._.x.x.x._.x._.c, model.arrayOfFunctions[7].b) : [15 x 15 x 64 x *], [1 x 1 x 64] -> [15 x 15 x 64 x *]
Validating --> z.x._._.x._._.x.x.x._.x = RectifiedLinear (z.x._._.x._._.x.x.x._.x._.res.x) : [15 x 15 x 64 x *] -> [15 x 15 x 64 x *]
Node 'model.arrayOfFunctions[9].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 64 x 64].
Node 'model.arrayOfFunctions[9].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 64 x 64] <- glorotUniform(seed=4, init dims=[576 x 576], range=0.072169(0.072169*1.000000), onCPU=true.
)Validating --> z.x._._.x._._.x.x.x._.c = Convolution (model.arrayOfFunctions[9].W, z.x._._.x._._.x.x.x._.x) : [3 x 3 x 64 x 64], [15 x 15 x 64 x *] -> [15 x 15 x 64 x *]
Validating --> model.arrayOfFunctions[9].b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> z.x._._.x._._.x.x.x._.res.x = Plus (z.x._._.x._._.x.x.x._.c, model.arrayOfFunctions[9].b) : [15 x 15 x 64 x *], [1 x 1 x 64] -> [15 x 15 x 64 x *]
Validating --> z.x._._.x._._.x.x.x = RectifiedLinear (z.x._._.x._._.x.x.x._.res.x) : [15 x 15 x 64 x *] -> [15 x 15 x 64 x *]
Validating --> _z.x._._.x._._.x.x.den._ = LearnableParameter() :  -> [1]
Validating --> _z.x._._.x._._.x.x.den._.ElementTimesArgs[1]._ = LearnableParameter() :  -> [1]
Validating --> z.x._._.x._._.x.x.W = LearnableParameter() :  -> [1 x 1 x 9 x 1]
Validating --> z.x._._.x._._.x.x.x2 = ElementTimes (z.x._._.x._._.x.x.x, z.x._._.x._._.x.x.x) : [15 x 15 x 64 x *], [15 x 15 x 64 x *] -> [15 x 15 x 64 x *]
Validating --> z.x._._.x._._.x.x.x2s = Reshape (z.x._._.x._._.x.x.x2) : [15 x 15 x 64 x *] -> [15 x 15 x 64 x 1 x *]
Validating --> z.x._._.x._._.x.x.y = Convolution (z.x._._.x._._.x.x.W, z.x._._.x._._.x.x.x2s) : [1 x 1 x 9 x 1], [15 x 15 x 64 x 1 x *] -> [15 x 15 x 64 x 1 x *]
Validating --> z.x._._.x._._.x.x.b = Reshape (z.x._._.x._._.x.x.y) : [15 x 15 x 64 x 1 x *] -> [15 x 15 x 64 x *]
Validating --> z.x._._.x._._.x.x.den._.ElementTimesArgs[1]._ = Plus (_z.x._._.x._._.x.x.den._.ElementTimesArgs[1]._, z.x._._.x._._.x.x.b) : [1], [15 x 15 x 64 x *] -> [15 x 15 x 64 x *]
Validating --> z.x._._.x._._.x.x.den._.ElementTimesArgs[1] = Log (z.x._._.x._._.x.x.den._.ElementTimesArgs[1]._) : [15 x 15 x 64 x *] -> [15 x 15 x 64 x *]
Validating --> z.x._._.x._._.x.x.den._ = ElementTimes (_z.x._._.x._._.x.x.den._, z.x._._.x._._.x.x.den._.ElementTimesArgs[1]) : [1], [15 x 15 x 64 x *] -> [15 x 15 x 64 x *]
Validating --> z.x._._.x._._.x.x.den = Exp (z.x._._.x._._.x.x.den._) : [15 x 15 x 64 x *] -> [15 x 15 x 64 x *]
Validating --> z.x._._.x._._.x.x.r.ElementTimesArgs[1] = Reciprocal (z.x._._.x._._.x.x.den) : [15 x 15 x 64 x *] -> [15 x 15 x 64 x *]
Validating --> z.x._._.x._._.x.x.r = ElementTimes (z.x._._.x._._.x.x.x, z.x._._.x._._.x.x.r.ElementTimesArgs[1]) : [15 x 15 x 64 x *], [15 x 15 x 64 x *] -> [15 x 15 x 64 x *]
Validating --> _z.x._._.x._._.x = Pooling (z.x._._.x._._.x.x.r) : [15 x 15 x 64 x *] -> [7 x 7 x 64 x *]
Node 'model.arrayOfFunctions[13].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [256 x 7 x 7 x 64].
Node 'model.arrayOfFunctions[13].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[256 x 7 x 7 x 64] <- glorotUniform(seed=3, init dims=[256 x 3136], range=0.042058(0.042058*1.000000), onCPU=true.
)Validating --> z.x._._.x._._.x.PlusArgs[0] = Times (model.arrayOfFunctions[13].arrayOfFunctions[0].W, _z.x._._.x._._.x) : [256 x 7 x 7 x 64], [7 x 7 x 64 x *] -> [256 x *]
Validating --> model.arrayOfFunctions[13].arrayOfFunctions[0].b = LearnableParameter() :  -> [256]
Validating --> z.x._._.x._._.x = Plus (z.x._._.x._._.x.PlusArgs[0], model.arrayOfFunctions[13].arrayOfFunctions[0].b) : [256 x *], [256] -> [256 x *]
Validating --> z.x._._.x._ = RectifiedLinear (z.x._._.x._._.x) : [256 x *] -> [256 x *]
Validating --> _z.x._._.x = Dropout (z.x._._.x._) : [256 x *] -> [256 x *]
Node 'model.arrayOfFunctions[16].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [128 x 256].
Node 'model.arrayOfFunctions[16].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[128 x 256] <- glorotUniform(seed=2, init dims=[128 x 256], range=0.125000(0.125000*1.000000), onCPU=true.
)Validating --> z.x._._.x.PlusArgs[0] = Times (model.arrayOfFunctions[16].arrayOfFunctions[0].W, _z.x._._.x) : [128 x 256], [256 x *] -> [128 x *]
Validating --> model.arrayOfFunctions[16].arrayOfFunctions[0].b = LearnableParameter() :  -> [128]
Validating --> z.x._._.x = Plus (z.x._._.x.PlusArgs[0], model.arrayOfFunctions[16].arrayOfFunctions[0].b) : [128 x *], [128] -> [128 x *]
Validating --> z.x._ = RectifiedLinear (z.x._._.x) : [128 x *] -> [128 x *]
Validating --> z.x = Dropout (z.x._) : [128 x *] -> [128 x *]
Node 'model.arrayOfFunctions[19].W' (LearnableParameter operation) operation: Tensor shape was inferred as [10 x 128].
Node 'model.arrayOfFunctions[19].W' (LearnableParameter operation): Initializing Parameter[10 x 128] <- glorotUniform(seed=1, init dims=[10 x 128], range=0.208514(0.208514*1.000000), onCPU=true.
)Validating --> z.PlusArgs[0] = Times (model.arrayOfFunctions[19].W, z.x) : [10 x 128], [128 x *] -> [10 x *]
Validating --> model.arrayOfFunctions[19].b = LearnableParameter() :  -> [10]
Validating --> z = Plus (z.PlusArgs[0], model.arrayOfFunctions[19].b) : [10 x *], [10] -> [10 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, z) : [10 x *], [10 x *] -> [1]
Validating --> errs = ClassificationError (labels, z) : [10 x *], [10 x *] -> [1]
Validating --> inputs.inputs[2] = LearnableParameter() :  -> [1 x 1]
Validating --> top5Errs = ClassificationError (labels, z, inputs.inputs[2]) : [10 x *], [10 x *], [1 x 1] -> [1]

Validating network. 48 nodes to process in pass 2.


Validating network, final pass.

z.x._._.x._._.x.x.x._.x._.x.x.x._.x._.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 64, Kernel: 3 x 3 x 3, Map: 64, Stride: 1 x 1 x 3, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
z.x._._.x._._.x.x.x._.x._.x.x.x._.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 64, Output: 32 x 32 x 64, Kernel: 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 64, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
z.x._._.x._._.x.x.x._.x._.x.x.y: using cuDNN convolution engine for geometry: Input: 32 x 32 x 64 x 1, Output: 32 x 32 x 64 x 1, Kernel: 1 x 1 x 9 x 1, Map: 1, Stride: 1 x 1 x 1 x 1, Sharing: (1, 1, 1, 1), AutoPad: (1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0.
z.x._._.x._._.x.x.x._.x._.x: using cuDNN convolution engine for geometry: Input: 32 x 32 x 64, Output: 15 x 15 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
z.x._._.x._._.x.x.x._.x._.c: using cuDNN convolution engine for geometry: Input: 15 x 15 x 64, Output: 15 x 15 x 64, Kernel: 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 64, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
z.x._._.x._._.x.x.x._.c: using cuDNN convolution engine for geometry: Input: 15 x 15 x 64, Output: 15 x 15 x 64, Kernel: 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 64, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
z.x._._.x._._.x.x.y: using cuDNN convolution engine for geometry: Input: 15 x 15 x 64 x 1, Output: 15 x 15 x 64 x 1, Kernel: 1 x 1 x 9 x 1, Map: 1, Stride: 1 x 1 x 1 x 1, Sharing: (1, 1, 1, 1), AutoPad: (1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0.
_z.x._._.x._._.x: using cuDNN convolution engine for geometry: Input: 15 x 15 x 64, Output: 7 x 7 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.



Post-processing network complete.

12/09/2017 10:44:39: 
Model has 72 nodes. Using GPU 0.

12/09/2017 10:44:39: Training criterion:   ce = CrossEntropyWithSoftmax
12/09/2017 10:44:39: Evaluation criterion: errs = ClassificationError


Allocating matrices for forward and/or backward propagation.

Gradient Memory Aliasing: 24 are aliased.
	z.x._._.x._._.x.x.x2 (gradient) reuses z.x._._.x._._.x.x.x2s (gradient)
	z.x._._.x._._.x.x.x._.x._.x.x.x._.c (gradient) reuses z.x._._.x._._.x.x.x._.x._.x.x.x._.res.x (gradient)
	z.x._._.x._._.x.x.b (gradient) reuses z.x._._.x._._.x.x.den._.ElementTimesArgs[1]._ (gradient)
	z.PlusArgs[0] (gradient) reuses z (gradient)
	z.x._._.x._._.x.PlusArgs[0] (gradient) reuses z.x._._.x._._.x (gradient)
	z.x._._.x._._.x.x.x._.x._.x.x.y (gradient) reuses z.x._._.x._._.x.x.x._.x._.x.x.den._.ElementTimesArgs[1]._ (gradient)
	z.x._._.x.PlusArgs[0] (gradient) reuses z.x._._.x (gradient)
	z.x._._.x._._.x.x.x._.c (gradient) reuses z.x._._.x._._.x.x.x._.res.x (gradient)
	z.x._._.x._._.x.x.x._.x._.x.x.x2 (gradient) reuses z.x._._.x._._.x.x.x._.x._.x.x.x2s (gradient)
	z.x._._.x._._.x.x.x._.x._.x.x.b (gradient) reuses z.x._._.x._._.x.x.x._.x._.x.x.den._.ElementTimesArgs[1]._ (gradient)
	z.x._._.x._._.x.x.y (gradient) reuses z.x._._.x._._.x.x.den._.ElementTimesArgs[1]._ (gradient)
	z.x._._.x._._.x.x.x._.x._.c (gradient) reuses z.x._._.x._._.x.x.x._.x._.res.x (gradient)
	z.x._._.x._._.x.x.x._.x._.x.x.x._.x._.c (gradient) reuses z.x._._.x._._.x.x.x._.x._.x.x.x._.x._.res.x (gradient)

Memory Sharing: Out of 131 matrices, 98 are shared as 20, and 33 are not shared.

Here are the ones that share memory:
	{ _z.x._._.x._._.x : [7 x 7 x 64 x *] (gradient)
	  model.arrayOfFunctions[3].W : [3 x 3 x 64 x 64] (gradient)
	  z.x : [128 x *]
	  z.x._._.x : [128 x *]
	  z.x._._.x : [128 x *] (gradient)
	  z.x._._.x.PlusArgs[0] : [128 x *] (gradient)
	  z.x._._.x._ : [256 x *] (gradient)
	  z.x._._.x._._.x : [256 x *]
	  z.x._._.x._._.x.x.x : [15 x 15 x 64 x *] (gradient)
	  z.x._._.x._._.x.x.x._.x._.x.x.den : [32 x 32 x 64 x *] (gradient)
	  z.x._._.x._._.x.x.x._.x._.x.x.den._.ElementTimesArgs[1] : [32 x 32 x 64 x *] (gradient)
	  z.x._._.x._._.x.x.x._.x._.x.x.r : [32 x 32 x 64 x *] (gradient)
	  z.x._._.x._._.x.x.x._.x._.x.x.x._.x._.c : [32 x 32 x 64 x *]
	  z.x._._.x._._.x.x.x._.x._.x.x.x2 : [32 x 32 x 64 x *] (gradient)
	  z.x._._.x._._.x.x.x._.x._.x.x.x2s : [32 x 32 x 64 x 1 x *] (gradient) }
	{ model.arrayOfFunctions[1].W : [3 x 3 x 3 x 64] (gradient)
	  z.x._._.x._._.x.x.x._.x._.x : [15 x 15 x 64 x *]
	  z.x._._.x._._.x.x.x._.x._.x.x.x : [32 x 32 x 64 x *] (gradient) }
	{ _z.x._._.x : [256 x *] (gradient)
	  model.arrayOfFunctions[1].b : [1 x 1 x 64] (gradient)
	  z.x._ : [128 x *]
	  z.x._._.x.PlusArgs[0] : [128 x *]
	  z.x._._.x._._.x : [256 x *] (gradient)
	  z.x._._.x._._.x.PlusArgs[0] : [256 x *]
	  z.x._._.x._._.x.PlusArgs[0] : [256 x *] (gradient)
	  z.x._._.x._._.x.x.den : [15 x 15 x 64 x *] (gradient)
	  z.x._._.x._._.x.x.den._.ElementTimesArgs[1] : [15 x 15 x 64 x *] (gradient)
	  z.x._._.x._._.x.x.r : [15 x 15 x 64 x *] (gradient)
	  z.x._._.x._._.x.x.x._.x : [15 x 15 x 64 x *] (gradient)
	  z.x._._.x._._.x.x.x._.x._.res.x : [15 x 15 x 64 x *]
	  z.x._._.x._._.x.x.x._.x._.x : [15 x 15 x 64 x *] (gradient)
	  z.x._._.x._._.x.x.x._.x._.x.x.b : [32 x 32 x 64 x *] (gradient)
	  z.x._._.x._._.x.x.x._.x._.x.x.den._ : [32 x 32 x 64 x *] (gradient)
	  z.x._._.x._._.x.x.x._.x._.x.x.den._.ElementTimesArgs[1]._ : [32 x 32 x 64 x *] (gradient)
	  z.x._._.x._._.x.x.x._.x._.x.x.r.ElementTimesArgs[1] : [32 x 32 x 64 x *] (gradient)
	  z.x._._.x._._.x.x.x._.x._.x.x.x._.c : [32 x 32 x 64 x *] (gradient)
	  z.x._._.x._._.x.x.x._.x._.x.x.x._.res.x : [32 x 32 x 64 x *] (gradient)
	  z.x._._.x._._.x.x.x._.x._.x.x.y : [32 x 32 x 64 x 1 x *] (gradient)
	  z.x._._.x._._.x.x.x2 : [15 x 15 x 64 x *] (gradient)
	  z.x._._.x._._.x.x.x2s : [15 x 15 x 64 x 1 x *] (gradient) }
	{ model.arrayOfFunctions[3].b : [1 x 1 x 64] (gradient)
	  z.x._._.x._._.x.x.x._.x._.x.x.r : [32 x 32 x 64 x *] }
	{ z.x._._.x._._.x.x.x._.x._.x.x.b : [32 x 32 x 64 x *]
	  z.x._._.x._._.x.x.x._.x._.x.x.den._ : [32 x 32 x 64 x *]
	  z.x._._.x._._.x.x.x._.x._.x.x.r.ElementTimesArgs[1] : [32 x 32 x 64 x *] }
	{ z.x._._.x._._.x.x.x._.x._.x.x.den : [32 x 32 x 64 x *]
	  z.x._._.x._._.x.x.x._.x._.x.x.den._.ElementTimesArgs[1]._ : [32 x 32 x 64 x *]
	  z.x._._.x._._.x.x.x._.x._.x.x.x._.res.x : [32 x 32 x 64 x *]
	  z.x._._.x._._.x.x.x._.x._.x.x.x2 : [32 x 32 x 64 x *] }
	{ z.x._._.x._._.x.x.x._.x._.x.x.x : [32 x 32 x 64 x *]
	  z.x._._.x._._.x.x.x._.x._.x.x.x._.c : [32 x 32 x 64 x *]
	  z.x._._.x._._.x.x.x._.x._.x.x.x._.x._.c : [32 x 32 x 64 x *] (gradient)
	  z.x._._.x._._.x.x.x._.x._.x.x.x._.x._.res.x : [32 x 32 x 64 x *] (gradient) }
	{ z.x._._.x._._.x.x.x._.x._.x.x.x._.x._.res.x : [32 x 32 x 64 x *]
	  z.x._._.x._._.x.x.x._.x._.x.x.x2s : [32 x 32 x 64 x 1 x *] }
	{ z.x._._.x._._.x.x.x._.x._.x.x.den._.ElementTimesArgs[1] : [32 x 32 x 64 x *]
	  z.x._._.x._._.x.x.x._.x._.x.x.x._.x : [32 x 32 x 64 x *] (gradient)
	  z.x._._.x._._.x.x.x._.x._.x.x.y : [32 x 32 x 64 x 1 x *] }
	{ _z.x._._.x._._.x : [7 x 7 x 64 x *]
	  z.x._._.x._._.x.x.b : [15 x 15 x 64 x *] (gradient)
	  z.x._._.x._._.x.x.den._ : [15 x 15 x 64 x *] (gradient)
	  z.x._._.x._._.x.x.den._.ElementTimesArgs[1]._ : [15 x 15 x 64 x *]
	  z.x._._.x._._.x.x.den._.ElementTimesArgs[1]._ : [15 x 15 x 64 x *] (gradient)
	  z.x._._.x._._.x.x.r.ElementTimesArgs[1] : [15 x 15 x 64 x *] (gradient)
	  z.x._._.x._._.x.x.x._.c : [15 x 15 x 64 x *] (gradient)
	  z.x._._.x._._.x.x.x._.res.x : [15 x 15 x 64 x *] (gradient)
	  z.x._._.x._._.x.x.x._.x._.c : [15 x 15 x 64 x *]
	  z.x._._.x._._.x.x.x._.x._.c : [15 x 15 x 64 x *] (gradient)
	  z.x._._.x._._.x.x.x._.x._.res.x : [15 x 15 x 64 x *] (gradient)
	  z.x._._.x._._.x.x.y : [15 x 15 x 64 x 1 x *]
	  z.x._._.x._._.x.x.y : [15 x 15 x 64 x 1 x *] (gradient) }
	{ model.arrayOfFunctions[7].W : [3 x 3 x 64 x 64] (gradient)
	  z.x._._.x._._.x.x.b : [15 x 15 x 64 x *]
	  z.x._._.x._._.x.x.den._ : [15 x 15 x 64 x *]
	  z.x._._.x._._.x.x.r : [15 x 15 x 64 x *] }
	{ model.arrayOfFunctions[9].W : [3 x 3 x 64 x 64] (gradient)
	  z.x._._.x._._.x.x.den._.ElementTimesArgs[1] : [15 x 15 x 64 x *] }
	{ model.arrayOfFunctions[9].b : [1 x 1 x 64] (gradient)
	  z.x._._.x._._.x.x.den : [15 x 15 x 64 x *] }
	{ model.arrayOfFunctions[7].b : [1 x 1 x 64] (gradient)
	  z.x._._.x._._.x.x.r.ElementTimesArgs[1] : [15 x 15 x 64 x *]
	  z.x._._.x._._.x.x.x2 : [15 x 15 x 64 x *] }
	{ z.x._._.x._._.x.x.x._.res.x : [15 x 15 x 64 x *]
	  z.x._._.x._._.x.x.x2s : [15 x 15 x 64 x 1 x *] }
	{ z.x._._.x._._.x.x.x : [15 x 15 x 64 x *]
	  z.x._._.x._._.x.x.x._.c : [15 x 15 x 64 x *] }
	{ model.arrayOfFunctions[13].arrayOfFunctions[0].W : [256 x 7 x 7 x 64] (gradient)
	  z.x._._.x._ : [256 x *] }
	{ _z.x._._.x : [256 x *]
	  model.arrayOfFunctions[13].arrayOfFunctions[0].b : [256] (gradient) }
	{ model.arrayOfFunctions[16].arrayOfFunctions[0].W : [128 x 256] (gradient)
	  z : [10 x *] (gradient)
	  z.PlusArgs[0] : [10 x *]
	  z.PlusArgs[0] : [10 x *] (gradient)
	  z.x._ : [128 x *] (gradient) }
	{ model.arrayOfFunctions[16].arrayOfFunctions[0].b : [128] (gradient)
	  z : [10 x *]
	  z.x : [128 x *] (gradient) }

Here are the ones that don't share memory:
	{top5Errs : [1]}
	{inputs.inputs[2] : [1 x 1]}
	{labels : [10 x *]}
	{_z.x._._.x._._.x.x.den._ : [1]}
	{model.arrayOfFunctions[19].W : [10 x 128]}
	{model.arrayOfFunctions[16].arrayOfFunctions[0].W : [128 x 256]}
	{model.arrayOfFunctions[13].arrayOfFunctions[0].b : [256]}
	{model.arrayOfFunctions[13].arrayOfFunctions[0].W : [256 x 7 x 7 x 64]}
	{model.arrayOfFunctions[19].b : [10]}
	{model.arrayOfFunctions[9].W : [3 x 3 x 64 x 64]}
	{_z.x._._.x._._.x.x.den._.ElementTimesArgs[1]._ : [1]}
	{model.arrayOfFunctions[7].W : [3 x 3 x 64 x 64]}
	{model.arrayOfFunctions[3].b : [1 x 1 x 64]}
	{model.arrayOfFunctions[7].b : [1 x 1 x 64]}
	{_z.x._._.x._._.x.x.x._.x._.x.x.x._.x._.x : [1]}
	{_z.x._._.x._._.x.x.x._.x._.x.x.den._.ElementTimesArgs[1]._ : [1]}
	{z.x._._.x._._.x.x.x._.x._.x.x.W : [1 x 1 x 9 x 1]}
	{z.x._._.x._._.x.x.W : [1 x 1 x 9 x 1]}
	{_z.x._._.x._._.x.x.x._.x._.x.x.den._ : [1]}
	{model.arrayOfFunctions[16].arrayOfFunctions[0].b : [128]}
	{model.arrayOfFunctions[3].W : [3 x 3 x 64 x 64]}
	{model.arrayOfFunctions[9].b : [1 x 1 x 64]}
	{features : [32 x 32 x 3 x *]}
	{model.arrayOfFunctions[1].W : [3 x 3 x 3 x 64]}
	{model.arrayOfFunctions[1].b : [1 x 1 x 64]}
	{errs : [1]}
	{ce : [1]}
	{z.x._._.x._._.x.x.x._.x._.x.x.x._.x : [32 x 32 x 64 x *]}
	{z.x._._.x._._.x.x.x._.x : [15 x 15 x 64 x *]}
	{z.x._._.x._._.x.x.x._.x._.x.x.x._.x._.x : [32 x 32 x 3 x *]}
	{model.arrayOfFunctions[19].W : [10 x 128] (gradient)}
	{model.arrayOfFunctions[19].b : [10] (gradient)}
	{ce : [1] (gradient)}


12/09/2017 10:44:39: Training 949834 parameters in 14 out of 14 parameter tensors and 59 nodes with gradient:

12/09/2017 10:44:39: 	Node 'model.arrayOfFunctions[13].arrayOfFunctions[0].W' (LearnableParameter operation) : [256 x 7 x 7 x 64]
12/09/2017 10:44:39: 	Node 'model.arrayOfFunctions[13].arrayOfFunctions[0].b' (LearnableParameter operation) : [256]
12/09/2017 10:44:39: 	Node 'model.arrayOfFunctions[16].arrayOfFunctions[0].W' (LearnableParameter operation) : [128 x 256]
12/09/2017 10:44:39: 	Node 'model.arrayOfFunctions[16].arrayOfFunctions[0].b' (LearnableParameter operation) : [128]
12/09/2017 10:44:39: 	Node 'model.arrayOfFunctions[19].W' (LearnableParameter operation) : [10 x 128]
12/09/2017 10:44:39: 	Node 'model.arrayOfFunctions[19].b' (LearnableParameter operation) : [10]
12/09/2017 10:44:39: 	Node 'model.arrayOfFunctions[1].W' (LearnableParameter operation) : [3 x 3 x 3 x 64]
12/09/2017 10:44:39: 	Node 'model.arrayOfFunctions[1].b' (LearnableParameter operation) : [1 x 1 x 64]
12/09/2017 10:44:39: 	Node 'model.arrayOfFunctions[3].W' (LearnableParameter operation) : [3 x 3 x 64 x 64]
12/09/2017 10:44:39: 	Node 'model.arrayOfFunctions[3].b' (LearnableParameter operation) : [1 x 1 x 64]
12/09/2017 10:44:39: 	Node 'model.arrayOfFunctions[7].W' (LearnableParameter operation) : [3 x 3 x 64 x 64]
12/09/2017 10:44:39: 	Node 'model.arrayOfFunctions[7].b' (LearnableParameter operation) : [1 x 1 x 64]
12/09/2017 10:44:39: 	Node 'model.arrayOfFunctions[9].W' (LearnableParameter operation) : [3 x 3 x 64 x 64]
12/09/2017 10:44:39: 	Node 'model.arrayOfFunctions[9].b' (LearnableParameter operation) : [1 x 1 x 64]

12/09/2017 10:44:39: No PreCompute nodes found, or all already computed. Skipping pre-computation step.
Setting dropout rate to 0.5.

12/09/2017 10:44:39: Starting Epoch 1: learning rate per sample = 0.001563  effective momentum = 0.000000  momentum as time constant = 0.0 samples

12/09/2017 10:44:39: Starting minibatch loop.
(GPU): creating curand object with seed 0
(GPU): creating curand object with seed 1
12/09/2017 10:44:41:  Epoch[ 1 of 3]-Minibatch[   1-  16, 25.00%]: ce = 2.29778147 * 1024; errs = 89.551% * 1024; time = 1.5708s; samplesPerSecond = 651.9
12/09/2017 10:44:41:  Epoch[ 1 of 3]-Minibatch[  17-  32, 50.00%]: ce = 2.29917383 * 1024; errs = 87.891% * 1024; time = 0.6492s; samplesPerSecond = 1577.4
12/09/2017 10:44:42:  Epoch[ 1 of 3]-Minibatch[  33-  48, 75.00%]: ce = 2.28987074 * 1024; errs = 86.914% * 1024; time = 0.6496s; samplesPerSecond = 1576.4
12/09/2017 10:44:43:  Epoch[ 1 of 3]-Minibatch[  49-  64, 100.00%]: ce = 2.25362062 * 1024; errs = 85.645% * 1024; time = 0.6495s; samplesPerSecond = 1576.6
12/09/2017 10:44:43: Finished Epoch[ 1 of 3]: [Training] ce = 2.28511167 * 4096; errs = 87.500% * 4096; totalSamplesSeen = 4096; learningRatePerSample = 0.0015625; epochTime=3.52303s
12/09/2017 10:44:43: SGD: Saving checkpoint model '/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNetLRN_CIFAR10_DataAug@release_gpu/Models/ConvNetLRN_CIFAR10_DataAug.1'

12/09/2017 10:44:43: Starting Epoch 2: learning rate per sample = 0.001563  effective momentum = 0.000000  momentum as time constant = 0.0 samples

12/09/2017 10:44:43: Starting minibatch loop.
(GPU): creating curand object with seed 2
(GPU): creating curand object with seed 3
12/09/2017 10:44:44:  Epoch[ 2 of 3]-Minibatch[   1-  16, 25.00%]: ce = 2.21101761 * 1024; errs = 83.105% * 1024; time = 0.6595s; samplesPerSecond = 1552.6
12/09/2017 10:44:44:  Epoch[ 2 of 3]-Minibatch[  17-  32, 50.00%]: ce = 2.17973137 * 1024; errs = 82.715% * 1024; time = 0.6497s; samplesPerSecond = 1576.2
12/09/2017 10:44:45:  Epoch[ 2 of 3]-Minibatch[  33-  48, 75.00%]: ce = 2.15753937 * 1024; errs = 81.543% * 1024; time = 0.6514s; samplesPerSecond = 1572.0
12/09/2017 10:44:45:  Epoch[ 2 of 3]-Minibatch[  49-  64, 100.00%]: ce = 2.15058994 * 1024; errs = 81.445% * 1024; time = 0.6487s; samplesPerSecond = 1578.6
12/09/2017 10:44:45: Finished Epoch[ 2 of 3]: [Training] ce = 2.17471957 * 4096; errs = 82.202% * 4096; totalSamplesSeen = 8192; learningRatePerSample = 0.0015625; epochTime=2.61045s
12/09/2017 10:44:46: SGD: Saving checkpoint model '/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNetLRN_CIFAR10_DataAug@release_gpu/Models/ConvNetLRN_CIFAR10_DataAug.2'

12/09/2017 10:44:46: Starting Epoch 3: learning rate per sample = 0.001563  effective momentum = 0.000000  momentum as time constant = 0.0 samples

12/09/2017 10:44:46: Starting minibatch loop.
(GPU): creating curand object with seed 4
(GPU): creating curand object with seed 5
12/09/2017 10:44:46:  Epoch[ 3 of 3]-Minibatch[   1-  16, 25.00%]: ce = 2.10761237 * 1024; errs = 78.809% * 1024; time = 0.6601s; samplesPerSecond = 1551.3
12/09/2017 10:44:47:  Epoch[ 3 of 3]-Minibatch[  17-  32, 50.00%]: ce = 2.11252999 * 1024; errs = 79.102% * 1024; time = 0.6491s; samplesPerSecond = 1577.5
12/09/2017 10:44:47:  Epoch[ 3 of 3]-Minibatch[  33-  48, 75.00%]: ce = 2.08845472 * 1024; errs = 77.539% * 1024; time = 0.6493s; samplesPerSecond = 1577.1
12/09/2017 10:44:48:  Epoch[ 3 of 3]-Minibatch[  49-  64, 100.00%]: ce = 2.11298037 * 1024; errs = 78.906% * 1024; time = 0.6489s; samplesPerSecond = 1577.9
12/09/2017 10:44:48: Finished Epoch[ 3 of 3]: [Training] ce = 2.10539436 * 4096; errs = 78.589% * 4096; totalSamplesSeen = 12288; learningRatePerSample = 0.0015625; epochTime=2.60857s
12/09/2017 10:44:48: SGD: Saving checkpoint model '/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNetLRN_CIFAR10_DataAug@release_gpu/Models/ConvNetLRN_CIFAR10_DataAug'

12/09/2017 10:44:48: Action "train" complete.


12/09/2017 10:44:48: ##############################################################################
12/09/2017 10:44:48: #                                                                            #
12/09/2017 10:44:48: # Eval command (eval action)                                                 #
12/09/2017 10:44:48: #                                                                            #
12/09/2017 10:44:48: ##############################################################################


Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ClassificationError()
	top5Errs = ClassificationError()

Validating network. 72 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> model.arrayOfFunctions[19].W = LearnableParameter() :  -> [10 x 128]
Validating --> model.arrayOfFunctions[16].arrayOfFunctions[0].W = LearnableParameter() :  -> [128 x 256]
Validating --> model.arrayOfFunctions[13].arrayOfFunctions[0].W = LearnableParameter() :  -> [256 x 7 x 7 x 64]
Validating --> model.arrayOfFunctions[9].W = LearnableParameter() :  -> [3 x 3 x 64 x 64]
Validating --> model.arrayOfFunctions[7].W = LearnableParameter() :  -> [3 x 3 x 64 x 64]
Validating --> model.arrayOfFunctions[3].W = LearnableParameter() :  -> [3 x 3 x 64 x 64]
Validating --> model.arrayOfFunctions[1].W = LearnableParameter() :  -> [3 x 3 x 3 x 64]
Validating --> _z.x._._.x._._.x.x.x._.x._.x.x.x._.x._.x = LearnableParameter() :  -> [1]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *1]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.x._.x._.x = ElementTimes (_z.x._._.x._._.x.x.x._.x._.x.x.x._.x._.x, features) : [1], [32 x 32 x 3 x *1] -> [32 x 32 x 3 x *1]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.x._.x._.c = Convolution (model.arrayOfFunctions[1].W, z.x._._.x._._.x.x.x._.x._.x.x.x._.x._.x) : [3 x 3 x 3 x 64], [32 x 32 x 3 x *1] -> [32 x 32 x 64 x *1]
Validating --> model.arrayOfFunctions[1].b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.x._.x._.res.x = Plus (z.x._._.x._._.x.x.x._.x._.x.x.x._.x._.c, model.arrayOfFunctions[1].b) : [32 x 32 x 64 x *1], [1 x 1 x 64] -> [32 x 32 x 64 x *1]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.x._.x = RectifiedLinear (z.x._._.x._._.x.x.x._.x._.x.x.x._.x._.res.x) : [32 x 32 x 64 x *1] -> [32 x 32 x 64 x *1]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.x._.c = Convolution (model.arrayOfFunctions[3].W, z.x._._.x._._.x.x.x._.x._.x.x.x._.x) : [3 x 3 x 64 x 64], [32 x 32 x 64 x *1] -> [32 x 32 x 64 x *1]
Validating --> model.arrayOfFunctions[3].b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.x._.res.x = Plus (z.x._._.x._._.x.x.x._.x._.x.x.x._.c, model.arrayOfFunctions[3].b) : [32 x 32 x 64 x *1], [1 x 1 x 64] -> [32 x 32 x 64 x *1]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.x = RectifiedLinear (z.x._._.x._._.x.x.x._.x._.x.x.x._.res.x) : [32 x 32 x 64 x *1] -> [32 x 32 x 64 x *1]
Validating --> _z.x._._.x._._.x.x.x._.x._.x.x.den._ = LearnableParameter() :  -> [1]
Validating --> _z.x._._.x._._.x.x.x._.x._.x.x.den._.ElementTimesArgs[1]._ = LearnableParameter() :  -> [1]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.W = LearnableParameter() :  -> [1 x 1 x 9 x 1]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.x2 = ElementTimes (z.x._._.x._._.x.x.x._.x._.x.x.x, z.x._._.x._._.x.x.x._.x._.x.x.x) : [32 x 32 x 64 x *1], [32 x 32 x 64 x *1] -> [32 x 32 x 64 x *1]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.x2s = Reshape (z.x._._.x._._.x.x.x._.x._.x.x.x2) : [32 x 32 x 64 x *1] -> [32 x 32 x 64 x 1 x *1]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.y = Convolution (z.x._._.x._._.x.x.x._.x._.x.x.W, z.x._._.x._._.x.x.x._.x._.x.x.x2s) : [1 x 1 x 9 x 1], [32 x 32 x 64 x 1 x *1] -> [32 x 32 x 64 x 1 x *1]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.b = Reshape (z.x._._.x._._.x.x.x._.x._.x.x.y) : [32 x 32 x 64 x 1 x *1] -> [32 x 32 x 64 x *1]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.den._.ElementTimesArgs[1]._ = Plus (_z.x._._.x._._.x.x.x._.x._.x.x.den._.ElementTimesArgs[1]._, z.x._._.x._._.x.x.x._.x._.x.x.b) : [1], [32 x 32 x 64 x *1] -> [32 x 32 x 64 x *1]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.den._.ElementTimesArgs[1] = Log (z.x._._.x._._.x.x.x._.x._.x.x.den._.ElementTimesArgs[1]._) : [32 x 32 x 64 x *1] -> [32 x 32 x 64 x *1]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.den._ = ElementTimes (_z.x._._.x._._.x.x.x._.x._.x.x.den._, z.x._._.x._._.x.x.x._.x._.x.x.den._.ElementTimesArgs[1]) : [1], [32 x 32 x 64 x *1] -> [32 x 32 x 64 x *1]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.den = Exp (z.x._._.x._._.x.x.x._.x._.x.x.den._) : [32 x 32 x 64 x *1] -> [32 x 32 x 64 x *1]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.r.ElementTimesArgs[1] = Reciprocal (z.x._._.x._._.x.x.x._.x._.x.x.den) : [32 x 32 x 64 x *1] -> [32 x 32 x 64 x *1]
Validating --> z.x._._.x._._.x.x.x._.x._.x.x.r = ElementTimes (z.x._._.x._._.x.x.x._.x._.x.x.x, z.x._._.x._._.x.x.x._.x._.x.x.r.ElementTimesArgs[1]) : [32 x 32 x 64 x *1], [32 x 32 x 64 x *1] -> [32 x 32 x 64 x *1]
Validating --> z.x._._.x._._.x.x.x._.x._.x = Pooling (z.x._._.x._._.x.x.x._.x._.x.x.r) : [32 x 32 x 64 x *1] -> [15 x 15 x 64 x *1]
Validating --> z.x._._.x._._.x.x.x._.x._.c = Convolution (model.arrayOfFunctions[7].W, z.x._._.x._._.x.x.x._.x._.x) : [3 x 3 x 64 x 64], [15 x 15 x 64 x *1] -> [15 x 15 x 64 x *1]
Validating --> model.arrayOfFunctions[7].b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> z.x._._.x._._.x.x.x._.x._.res.x = Plus (z.x._._.x._._.x.x.x._.x._.c, model.arrayOfFunctions[7].b) : [15 x 15 x 64 x *1], [1 x 1 x 64] -> [15 x 15 x 64 x *1]
Validating --> z.x._._.x._._.x.x.x._.x = RectifiedLinear (z.x._._.x._._.x.x.x._.x._.res.x) : [15 x 15 x 64 x *1] -> [15 x 15 x 64 x *1]
Validating --> z.x._._.x._._.x.x.x._.c = Convolution (model.arrayOfFunctions[9].W, z.x._._.x._._.x.x.x._.x) : [3 x 3 x 64 x 64], [15 x 15 x 64 x *1] -> [15 x 15 x 64 x *1]
Validating --> model.arrayOfFunctions[9].b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> z.x._._.x._._.x.x.x._.res.x = Plus (z.x._._.x._._.x.x.x._.c, model.arrayOfFunctions[9].b) : [15 x 15 x 64 x *1], [1 x 1 x 64] -> [15 x 15 x 64 x *1]
Validating --> z.x._._.x._._.x.x.x = RectifiedLinear (z.x._._.x._._.x.x.x._.res.x) : [15 x 15 x 64 x *1] -> [15 x 15 x 64 x *1]
Validating --> _z.x._._.x._._.x.x.den._ = LearnableParameter() :  -> [1]
Validating --> _z.x._._.x._._.x.x.den._.ElementTimesArgs[1]._ = LearnableParameter() :  -> [1]
Validating --> z.x._._.x._._.x.x.W = LearnableParameter() :  -> [1 x 1 x 9 x 1]
Validating --> z.x._._.x._._.x.x.x2 = ElementTimes (z.x._._.x._._.x.x.x, z.x._._.x._._.x.x.x) : [15 x 15 x 64 x *1], [15 x 15 x 64 x *1] -> [15 x 15 x 64 x *1]
Validating --> z.x._._.x._._.x.x.x2s = Reshape (z.x._._.x._._.x.x.x2) : [15 x 15 x 64 x *1] -> [15 x 15 x 64 x 1 x *1]
Validating --> z.x._._.x._._.x.x.y = Convolution (z.x._._.x._._.x.x.W, z.x._._.x._._.x.x.x2s) : [1 x 1 x 9 x 1], [15 x 15 x 64 x 1 x *1] -> [15 x 15 x 64 x 1 x *1]
Validating --> z.x._._.x._._.x.x.b = Reshape (z.x._._.x._._.x.x.y) : [15 x 15 x 64 x 1 x *1] -> [15 x 15 x 64 x *1]
Validating --> z.x._._.x._._.x.x.den._.ElementTimesArgs[1]._ = Plus (_z.x._._.x._._.x.x.den._.ElementTimesArgs[1]._, z.x._._.x._._.x.x.b) : [1], [15 x 15 x 64 x *1] -> [15 x 15 x 64 x *1]
Validating --> z.x._._.x._._.x.x.den._.ElementTimesArgs[1] = Log (z.x._._.x._._.x.x.den._.ElementTimesArgs[1]._) : [15 x 15 x 64 x *1] -> [15 x 15 x 64 x *1]
Validating --> z.x._._.x._._.x.x.den._ = ElementTimes (_z.x._._.x._._.x.x.den._, z.x._._.x._._.x.x.den._.ElementTimesArgs[1]) : [1], [15 x 15 x 64 x *1] -> [15 x 15 x 64 x *1]
Validating --> z.x._._.x._._.x.x.den = Exp (z.x._._.x._._.x.x.den._) : [15 x 15 x 64 x *1] -> [15 x 15 x 64 x *1]
Validating --> z.x._._.x._._.x.x.r.ElementTimesArgs[1] = Reciprocal (z.x._._.x._._.x.x.den) : [15 x 15 x 64 x *1] -> [15 x 15 x 64 x *1]
Validating --> z.x._._.x._._.x.x.r = ElementTimes (z.x._._.x._._.x.x.x, z.x._._.x._._.x.x.r.ElementTimesArgs[1]) : [15 x 15 x 64 x *1], [15 x 15 x 64 x *1] -> [15 x 15 x 64 x *1]
Validating --> _z.x._._.x._._.x = Pooling (z.x._._.x._._.x.x.r) : [15 x 15 x 64 x *1] -> [7 x 7 x 64 x *1]
Validating --> z.x._._.x._._.x.PlusArgs[0] = Times (model.arrayOfFunctions[13].arrayOfFunctions[0].W, _z.x._._.x._._.x) : [256 x 7 x 7 x 64], [7 x 7 x 64 x *1] -> [256 x *1]
Validating --> model.arrayOfFunctions[13].arrayOfFunctions[0].b = LearnableParameter() :  -> [256]
Validating --> z.x._._.x._._.x = Plus (z.x._._.x._._.x.PlusArgs[0], model.arrayOfFunctions[13].arrayOfFunctions[0].b) : [256 x *1], [256] -> [256 x *1]
Validating --> z.x._._.x._ = RectifiedLinear (z.x._._.x._._.x) : [256 x *1] -> [256 x *1]
Validating --> _z.x._._.x = Dropout (z.x._._.x._) : [256 x *1] -> [256 x *1]
Validating --> z.x._._.x.PlusArgs[0] = Times (model.arrayOfFunctions[16].arrayOfFunctions[0].W, _z.x._._.x) : [128 x 256], [256 x *1] -> [128 x *1]
Validating --> model.arrayOfFunctions[16].arrayOfFunctions[0].b = LearnableParameter() :  -> [128]
Validating --> z.x._._.x = Plus (z.x._._.x.PlusArgs[0], model.arrayOfFunctions[16].arrayOfFunctions[0].b) : [128 x *1], [128] -> [128 x *1]
Validating --> z.x._ = RectifiedLinear (z.x._._.x) : [128 x *1] -> [128 x *1]
Validating --> z.x = Dropout (z.x._) : [128 x *1] -> [128 x *1]
Validating --> z.PlusArgs[0] = Times (model.arrayOfFunctions[19].W, z.x) : [10 x 128], [128 x *1] -> [10 x *1]
Validating --> model.arrayOfFunctions[19].b = LearnableParameter() :  -> [10]
Validating --> z = Plus (z.PlusArgs[0], model.arrayOfFunctions[19].b) : [10 x *1], [10] -> [10 x *1]
Validating --> ce = CrossEntropyWithSoftmax (labels, z) : [10 x *1], [10 x *1] -> [1]
Validating --> errs = ClassificationError (labels, z) : [10 x *1], [10 x *1] -> [1]
Validating --> inputs.inputs[2] = LearnableParameter() :  -> [1 x 1]
Validating --> top5Errs = ClassificationError (labels, z, inputs.inputs[2]) : [10 x *1], [10 x *1], [1 x 1] -> [1]

Validating network. 48 nodes to process in pass 2.


Validating network, final pass.

z.x._._.x._._.x.x.x._.x._.x.x.x._.x._.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 64, Kernel: 3 x 3 x 3, Map: 64, Stride: 1 x 1 x 3, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
z.x._._.x._._.x.x.x._.x._.x.x.x._.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 64, Output: 32 x 32 x 64, Kernel: 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 64, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
z.x._._.x._._.x.x.x._.x._.x.x.y: using cuDNN convolution engine for geometry: Input: 32 x 32 x 64 x 1, Output: 32 x 32 x 64 x 1, Kernel: 1 x 1 x 9 x 1, Map: 1, Stride: 1 x 1 x 1 x 1, Sharing: (1, 1, 1, 1), AutoPad: (1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0.
z.x._._.x._._.x.x.x._.x._.x: using cuDNN convolution engine for geometry: Input: 32 x 32 x 64, Output: 15 x 15 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
z.x._._.x._._.x.x.x._.x._.c: using cuDNN convolution engine for geometry: Input: 15 x 15 x 64, Output: 15 x 15 x 64, Kernel: 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 64, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
z.x._._.x._._.x.x.x._.c: using cuDNN convolution engine for geometry: Input: 15 x 15 x 64, Output: 15 x 15 x 64, Kernel: 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 64, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
z.x._._.x._._.x.x.y: using cuDNN convolution engine for geometry: Input: 15 x 15 x 64 x 1, Output: 15 x 15 x 64 x 1, Kernel: 1 x 1 x 9 x 1, Map: 1, Stride: 1 x 1 x 1 x 1, Sharing: (1, 1, 1, 1), AutoPad: (1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0.
_z.x._._.x._._.x: using cuDNN convolution engine for geometry: Input: 15 x 15 x 64, Output: 7 x 7 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.



Post-processing network complete.



Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 72 matrices, 45 are shared as 3, and 27 are not shared.

Here are the ones that share memory:
	{ z.x._._.x._._.x.x.den._ : [15 x 15 x 64 x *1]
	  z.x._._.x._._.x.x.den._.ElementTimesArgs[1]._ : [15 x 15 x 64 x *1]
	  z.x._._.x._._.x.x.r.ElementTimesArgs[1] : [15 x 15 x 64 x *1]
	  z.x._._.x._._.x.x.x._.x._.x.x.b : [32 x 32 x 64 x *1]
	  z.x._._.x._._.x.x.x._.x._.x.x.den : [32 x 32 x 64 x *1]
	  z.x._._.x._._.x.x.x._.x._.x.x.den._.ElementTimesArgs[1] : [32 x 32 x 64 x *1]
	  z.x._._.x._._.x.x.x._.x._.x.x.r : [32 x 32 x 64 x *1]
	  z.x._._.x._._.x.x.x._.x._.x.x.x._.x._.c : [32 x 32 x 64 x *1]
	  z.x._._.x._._.x.x.x._.x._.x.x.x2s : [32 x 32 x 64 x 1 x *1]
	  z.x._._.x._._.x.x.x2 : [15 x 15 x 64 x *1]
	  z.x._._.x._._.x.x.y : [15 x 15 x 64 x 1 x *1] }
	{ z.PlusArgs[0] : [10 x *1]
	  z.x._ : [128 x *1]
	  z.x._._.x.PlusArgs[0] : [128 x *1]
	  z.x._._.x._ : [256 x *1]
	  z.x._._.x._._.x.PlusArgs[0] : [256 x *1]
	  z.x._._.x._._.x.x.b : [15 x 15 x 64 x *1]
	  z.x._._.x._._.x.x.den : [15 x 15 x 64 x *1]
	  z.x._._.x._._.x.x.den._.ElementTimesArgs[1] : [15 x 15 x 64 x *1]
	  z.x._._.x._._.x.x.r : [15 x 15 x 64 x *1]
	  z.x._._.x._._.x.x.x._.res.x : [15 x 15 x 64 x *1]
	  z.x._._.x._._.x.x.x._.x : [15 x 15 x 64 x *1]
	  z.x._._.x._._.x.x.x._.x._.c : [15 x 15 x 64 x *1]
	  z.x._._.x._._.x.x.x._.x._.x.x.den._ : [32 x 32 x 64 x *1]
	  z.x._._.x._._.x.x.x._.x._.x.x.den._.ElementTimesArgs[1]._ : [32 x 32 x 64 x *1]
	  z.x._._.x._._.x.x.x._.x._.x.x.r.ElementTimesArgs[1] : [32 x 32 x 64 x *1]
	  z.x._._.x._._.x.x.x._.x._.x.x.x._.res.x : [32 x 32 x 64 x *1]
	  z.x._._.x._._.x.x.x._.x._.x.x.x._.x : [32 x 32 x 64 x *1]
	  z.x._._.x._._.x.x.x._.x._.x.x.x2 : [32 x 32 x 64 x *1]
	  z.x._._.x._._.x.x.x._.x._.x.x.y : [32 x 32 x 64 x 1 x *1]
	  z.x._._.x._._.x.x.x2s : [15 x 15 x 64 x 1 x *1] }
	{ _z.x._._.x : [256 x *1]
	  _z.x._._.x._._.x : [7 x 7 x 64 x *1]
	  z : [10 x *1]
	  z.x : [128 x *1]
	  z.x._._.x : [128 x *1]
	  z.x._._.x._._.x : [256 x *1]
	  z.x._._.x._._.x.x.x : [15 x 15 x 64 x *1]
	  z.x._._.x._._.x.x.x._.c : [15 x 15 x 64 x *1]
	  z.x._._.x._._.x.x.x._.x._.res.x : [15 x 15 x 64 x *1]
	  z.x._._.x._._.x.x.x._.x._.x : [15 x 15 x 64 x *1]
	  z.x._._.x._._.x.x.x._.x._.x.x.x : [32 x 32 x 64 x *1]
	  z.x._._.x._._.x.x.x._.x._.x.x.x._.c : [32 x 32 x 64 x *1]
	  z.x._._.x._._.x.x.x._.x._.x.x.x._.x._.res.x : [32 x 32 x 64 x *1]
	  z.x._._.x._._.x.x.x._.x._.x.x.x._.x._.x : [32 x 32 x 3 x *1] }

Here are the ones that don't share memory:
	{ce : [1]}
	{model.arrayOfFunctions[7].W : [3 x 3 x 64 x 64]}
	{model.arrayOfFunctions[9].b : [1 x 1 x 64]}
	{_z.x._._.x._._.x.x.den._ : [1]}
	{_z.x._._.x._._.x.x.den._.ElementTimesArgs[1]._ : [1]}
	{_z.x._._.x._._.x.x.x._.x._.x.x.den._ : [1]}
	{_z.x._._.x._._.x.x.x._.x._.x.x.den._.ElementTimesArgs[1]._ : [1]}
	{_z.x._._.x._._.x.x.x._.x._.x.x.x._.x._.x : [1]}
	{model.arrayOfFunctions[19].b : [10]}
	{model.arrayOfFunctions[19].W : [10 x 128]}
	{model.arrayOfFunctions[1].b : [1 x 1 x 64]}
	{model.arrayOfFunctions[1].W : [3 x 3 x 3 x 64]}
	{model.arrayOfFunctions[3].b : [1 x 1 x 64]}
	{model.arrayOfFunctions[3].W : [3 x 3 x 64 x 64]}
	{model.arrayOfFunctions[7].b : [1 x 1 x 64]}
	{features : [32 x 32 x 3 x *1]}
	{inputs.inputs[2] : [1 x 1]}
	{labels : [10 x *1]}
	{model.arrayOfFunctions[13].arrayOfFunctions[0].b : [256]}
	{model.arrayOfFunctions[13].arrayOfFunctions[0].W : [256 x 7 x 7 x 64]}
	{model.arrayOfFunctions[16].arrayOfFunctions[0].b : [128]}
	{model.arrayOfFunctions[16].arrayOfFunctions[0].W : [128 x 256]}
	{z.x._._.x._._.x.x.W : [1 x 1 x 9 x 1]}
	{z.x._._.x._._.x.x.x._.x._.x.x.W : [1 x 1 x 9 x 1]}
	{model.arrayOfFunctions[9].W : [3 x 3 x 64 x 64]}
	{errs : [1]}
	{top5Errs : [1]}

12/09/2017 10:44:52: Minibatch[1-20]: errs = 71.490% * 10000; top5Errs = 19.660% * 10000
12/09/2017 10:44:52: Final Results: Minibatch[1-20]: errs = 71.490% * 10000; top5Errs = 19.660% * 10000

12/09/2017 10:44:52: Action "eval" complete.

12/09/2017 10:44:52: __COMPLETED__