CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2690 v3 @ 2.60GHz
    Hardware threads: 12
    Total Memory: 57700428 kB
-------------------------------------------------------------------
=== Running /home/ubuntu/workspace/build/1bitsgd/release/bin/cntk configFile=/home/ubuntu/workspace/Tests/EndToEndTests/Examples/Image/Classification/ConvNet_CIFAR/ConvNet_CIFAR10_DataAug/../../../../../../../Examples/Image/Classification/ConvNet/BrainScript/ConvNet_CIFAR10_DataAug.cntk currentDirectory=/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNet_CIFAR10_DataAug@release_gpu/TestData RunDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNet_CIFAR10_DataAug@release_gpu DataDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNet_CIFAR10_DataAug@release_gpu/TestData ConfigDir=/home/ubuntu/workspace/Tests/EndToEndTests/Examples/Image/Classification/ConvNet_CIFAR/ConvNet_CIFAR10_DataAug/../../../../../../../Examples/Image/Classification/ConvNet/BrainScript OutputDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNet_CIFAR10_DataAug@release_gpu DeviceId=0 timestamping=true forceDeterministicAlgorithms=true stderr=- TrainConvNet=[SGD=[epochSize=4096,maxEpochs=3,numMBsToShowResult=16]]
CNTK 2.3.1+ (HEAD b130d7, Dec  8 2017 01:52:00) at 2017/12/09 10:45:04

/home/ubuntu/workspace/build/1bitsgd/release/bin/cntk  configFile=/home/ubuntu/workspace/Tests/EndToEndTests/Examples/Image/Classification/ConvNet_CIFAR/ConvNet_CIFAR10_DataAug/../../../../../../../Examples/Image/Classification/ConvNet/BrainScript/ConvNet_CIFAR10_DataAug.cntk  currentDirectory=/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNet_CIFAR10_DataAug@release_gpu/TestData  RunDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNet_CIFAR10_DataAug@release_gpu  DataDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNet_CIFAR10_DataAug@release_gpu/TestData  ConfigDir=/home/ubuntu/workspace/Tests/EndToEndTests/Examples/Image/Classification/ConvNet_CIFAR/ConvNet_CIFAR10_DataAug/../../../../../../../Examples/Image/Classification/ConvNet/BrainScript  OutputDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNet_CIFAR10_DataAug@release_gpu  DeviceId=0  timestamping=true  forceDeterministicAlgorithms=true  stderr=-  TrainConvNet=[SGD=[epochSize=4096,maxEpochs=3,numMBsToShowResult=16]]
Changed current directory to /tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNet_CIFAR10_DataAug@release_gpu/TestData
12/09/2017 10:45:04: Redirecting stderr to file -_TrainConvNet_Eval.log
12/09/2017 10:45:04: -------------------------------------------------------------------
12/09/2017 10:45:04: Build info: 

12/09/2017 10:45:04: 		Built time: Dec  8 2017 01:46:20
12/09/2017 10:45:04: 		Last modified date: Wed Nov 15 09:27:10 2017
12/09/2017 10:45:04: 		Build type: release
12/09/2017 10:45:04: 		Build target: GPU
12/09/2017 10:45:04: 		With 1bit-SGD: yes
12/09/2017 10:45:04: 		With ASGD: yes
12/09/2017 10:45:04: 		Math lib: mkl
12/09/2017 10:45:04: 		CUDA version: 9.0.0
12/09/2017 10:45:04: 		CUDNN version: 7.0.4
12/09/2017 10:45:04: 		Build Branch: HEAD
12/09/2017 10:45:04: 		Build SHA1: b130d7735044ce6697bfb963af91445bee740c73
12/09/2017 10:45:04: 		MPI distribution: Open MPI
12/09/2017 10:45:04: 		MPI version: 1.10.7
12/09/2017 10:45:04: -------------------------------------------------------------------
12/09/2017 10:45:04: -------------------------------------------------------------------
12/09/2017 10:45:04: GPU info:

12/09/2017 10:45:04: 		Device[0]: cores = 3072; computeCapability = 5.2; type = "Tesla M60"; total memory = 8123 MB; free memory = 8112 MB
12/09/2017 10:45:04: -------------------------------------------------------------------

Configuration After Processing and Variable Resolution:

configparameters: ConvNet_CIFAR10_DataAug.cntk:command=TrainConvNet:Eval
configparameters: ConvNet_CIFAR10_DataAug.cntk:ConfigDir=/home/ubuntu/workspace/Tests/EndToEndTests/Examples/Image/Classification/ConvNet_CIFAR/ConvNet_CIFAR10_DataAug/../../../../../../../Examples/Image/Classification/ConvNet/BrainScript
configparameters: ConvNet_CIFAR10_DataAug.cntk:currentDirectory=/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNet_CIFAR10_DataAug@release_gpu/TestData
configparameters: ConvNet_CIFAR10_DataAug.cntk:dataDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNet_CIFAR10_DataAug@release_gpu/TestData
configparameters: ConvNet_CIFAR10_DataAug.cntk:deviceId=0
configparameters: ConvNet_CIFAR10_DataAug.cntk:Eval={
    action = "eval"
evalNodeNames = errs:top5Errs  
    minibatchSize = 512
    reader = {
        verbosity = 0 ; randomize = false
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNet_CIFAR10_DataAug@release_gpu/TestData/test_map.txt"
            input = {
                features = { transforms = (
                   { type = "Scale" ; width = 32 ; height = 32 ; channels = 3 ; interpolations = "linear" } :
                   { type = "Mean"; meanFile = "/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNet_CIFAR10_DataAug@release_gpu/TestData/CIFAR-10_mean.xml" } : 
                   { type = "Transpose" }
                )}
                labels = { labelDim = 10 }
            }
        })
    }
}

configparameters: ConvNet_CIFAR10_DataAug.cntk:forceDeterministicAlgorithms=true
configparameters: ConvNet_CIFAR10_DataAug.cntk:modelPath=/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNet_CIFAR10_DataAug@release_gpu/Models/ConvNet_CIFAR10_DataAug
configparameters: ConvNet_CIFAR10_DataAug.cntk:outputDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNet_CIFAR10_DataAug@release_gpu
configparameters: ConvNet_CIFAR10_DataAug.cntk:precision=float
configparameters: ConvNet_CIFAR10_DataAug.cntk:rootDir=../../..
configparameters: ConvNet_CIFAR10_DataAug.cntk:RunDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNet_CIFAR10_DataAug@release_gpu
configparameters: ConvNet_CIFAR10_DataAug.cntk:stderr=-
configparameters: ConvNet_CIFAR10_DataAug.cntk:timestamping=true
configparameters: ConvNet_CIFAR10_DataAug.cntk:traceLevel=1
configparameters: ConvNet_CIFAR10_DataAug.cntk:TrainConvNet={
    action = "train"
    BrainScriptNetworkBuilder = {
        imageShape = 32:32:3
        labelDim = 10
        featScale = 1/256
        Normalize{f} = x => f .* x
        model = Sequential (
            Normalize {featScale} :
            ConvolutionalLayer {64, (3:3), pad = true} : ReLU : 
            ConvolutionalLayer {64, (3:3), pad = true} : ReLU : 
              MaxPoolingLayer {(3:3), stride = (2:2)} :
            ConvolutionalLayer {64, (3:3), pad = true} : ReLU : 
            ConvolutionalLayer {64, (3:3), pad = true} : ReLU : 
              MaxPoolingLayer {(3:3), stride = (2:2)} :
            DenseLayer {256} : ReLU : Dropout : 
            DenseLayer {128} : ReLU : Dropout : 
            LinearLayer {labelDim}
        )
        features = Input {imageShape}
        labels   = Input {labelDim}
        z = model (features)
        ce       = CrossEntropyWithSoftmax     (labels, z)
        errs     = ClassificationError         (labels, z)
top5Errs = ClassificationError         (labels, z, topN=5)  
        featureNodes    = (features)
        labelNodes      = (labels)
        criterionNodes  = (ce)
evaluationNodes = (errs)  
        outputNodes     = (z)
    }
    SGD = {
        epochSize = 0
        minibatchSize = 64
        learningRatesPerSample = 0.0015625*20:0.00046875*20:0.00015625*20:0.000046875*10:0.000015625
        momentumAsTimeConstant = 0*20:600*20:1200
        maxEpochs = 80
        L2RegWeight = 0.002
        dropoutRate = 0.5
        numMBsToShowResult = 100
    }
    reader = {
        verbosity = 0 ; randomize = true
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNet_CIFAR10_DataAug@release_gpu/TestData/train_map.txt"
            input = {
                features = { transforms = (
                    { type = "Crop" ; cropType = "RandomSide" ; sideRatio = 0.8 ; jitterType = "UniRatio" } :
                    { type = "Scale" ; width = 32 ; height = 32 ; channels = 3 ; interpolations = "linear" } :
                    { type = "Mean" ; meanFile = "/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNet_CIFAR10_DataAug@release_gpu/TestData/CIFAR-10_mean.xml" } : 
                    { type = "Transpose" }
                )}
                labels = { labelDim = 10 }
            }
        })
    }
} [SGD=[epochSize=4096,maxEpochs=3,numMBsToShowResult=16]]

12/09/2017 10:45:04: Commands: TrainConvNet Eval
12/09/2017 10:45:04: precision = "float"
12/09/2017 10:45:04: WARNING: forceDeterministicAlgorithms flag is specified. Using 1 CPU thread for processing.

12/09/2017 10:45:04: ##############################################################################
12/09/2017 10:45:04: #                                                                            #
12/09/2017 10:45:04: # TrainConvNet command (train action)                                        #
12/09/2017 10:45:04: #                                                                            #
12/09/2017 10:45:04: ##############################################################################

12/09/2017 10:45:04: 
Creating virgin network.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[10 x 0] as glorotUniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[128 x 0] as glorotUniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[256 x 0] as glorotUniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 0 x 64] as glorotUniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 0 x 64] as glorotUniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 0 x 64] as glorotUniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 0 x 64] as glorotUniform later when dimensions are fully known.

Post-processing network...

4 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ClassificationError()
	top5Errs = ClassificationError()
	z = Plus()

Validating network. 46 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> model.arrayOfFunctions[17].W = LearnableParameter() :  -> [10 x 0]
Validating --> model.arrayOfFunctions[14].arrayOfFunctions[0].W = LearnableParameter() :  -> [128 x 0]
Validating --> model.arrayOfFunctions[11].arrayOfFunctions[0].W = LearnableParameter() :  -> [256 x 0]
Validating --> model.arrayOfFunctions[8].W = LearnableParameter() :  -> [3 x 3 x 0 x 64]
Validating --> model.arrayOfFunctions[6].W = LearnableParameter() :  -> [3 x 3 x 0 x 64]
Validating --> model.arrayOfFunctions[3].W = LearnableParameter() :  -> [3 x 3 x 0 x 64]
Validating --> model.arrayOfFunctions[1].W = LearnableParameter() :  -> [3 x 3 x 0 x 64]
Validating --> _z.x._._.x._._.x.x._.x._.x.x._.x._.x = LearnableParameter() :  -> [1]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *]
Validating --> z.x._._.x._._.x.x._.x._.x.x._.x._.x = ElementTimes (_z.x._._.x._._.x.x._.x._.x.x._.x._.x, features) : [1], [32 x 32 x 3 x *] -> [32 x 32 x 3 x *]
Node 'model.arrayOfFunctions[1].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 64].
Node 'model.arrayOfFunctions[1].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 64] <- glorotUniform(seed=7, init dims=[576 x 27], range=0.099751(0.099751*1.000000), onCPU=true.
)Validating --> z.x._._.x._._.x.x._.x._.x.x._.x._.c = Convolution (model.arrayOfFunctions[1].W, z.x._._.x._._.x.x._.x._.x.x._.x._.x) : [3 x 3 x 3 x 64], [32 x 32 x 3 x *] -> [32 x 32 x 64 x *]
Validating --> model.arrayOfFunctions[1].b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> z.x._._.x._._.x.x._.x._.x.x._.x._.res.x = Plus (z.x._._.x._._.x.x._.x._.x.x._.x._.c, model.arrayOfFunctions[1].b) : [32 x 32 x 64 x *], [1 x 1 x 64] -> [32 x 32 x 64 x *]
Validating --> z.x._._.x._._.x.x._.x._.x.x._.x = RectifiedLinear (z.x._._.x._._.x.x._.x._.x.x._.x._.res.x) : [32 x 32 x 64 x *] -> [32 x 32 x 64 x *]
Node 'model.arrayOfFunctions[3].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 64 x 64].
Node 'model.arrayOfFunctions[3].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 64 x 64] <- glorotUniform(seed=6, init dims=[576 x 576], range=0.072169(0.072169*1.000000), onCPU=true.
)Validating --> z.x._._.x._._.x.x._.x._.x.x._.c = Convolution (model.arrayOfFunctions[3].W, z.x._._.x._._.x.x._.x._.x.x._.x) : [3 x 3 x 64 x 64], [32 x 32 x 64 x *] -> [32 x 32 x 64 x *]
Validating --> model.arrayOfFunctions[3].b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> z.x._._.x._._.x.x._.x._.x.x._.res.x = Plus (z.x._._.x._._.x.x._.x._.x.x._.c, model.arrayOfFunctions[3].b) : [32 x 32 x 64 x *], [1 x 1 x 64] -> [32 x 32 x 64 x *]
Validating --> z.x._._.x._._.x.x._.x._.x.x = RectifiedLinear (z.x._._.x._._.x.x._.x._.x.x._.res.x) : [32 x 32 x 64 x *] -> [32 x 32 x 64 x *]
Validating --> z.x._._.x._._.x.x._.x._.x = Pooling (z.x._._.x._._.x.x._.x._.x.x) : [32 x 32 x 64 x *] -> [15 x 15 x 64 x *]
Node 'model.arrayOfFunctions[6].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 64 x 64].
Node 'model.arrayOfFunctions[6].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 64 x 64] <- glorotUniform(seed=5, init dims=[576 x 576], range=0.072169(0.072169*1.000000), onCPU=true.
)Validating --> z.x._._.x._._.x.x._.x._.c = Convolution (model.arrayOfFunctions[6].W, z.x._._.x._._.x.x._.x._.x) : [3 x 3 x 64 x 64], [15 x 15 x 64 x *] -> [15 x 15 x 64 x *]
Validating --> model.arrayOfFunctions[6].b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> z.x._._.x._._.x.x._.x._.res.x = Plus (z.x._._.x._._.x.x._.x._.c, model.arrayOfFunctions[6].b) : [15 x 15 x 64 x *], [1 x 1 x 64] -> [15 x 15 x 64 x *]
Validating --> z.x._._.x._._.x.x._.x = RectifiedLinear (z.x._._.x._._.x.x._.x._.res.x) : [15 x 15 x 64 x *] -> [15 x 15 x 64 x *]
Node 'model.arrayOfFunctions[8].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 64 x 64].
Node 'model.arrayOfFunctions[8].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 64 x 64] <- glorotUniform(seed=4, init dims=[576 x 576], range=0.072169(0.072169*1.000000), onCPU=true.
)Validating --> z.x._._.x._._.x.x._.c = Convolution (model.arrayOfFunctions[8].W, z.x._._.x._._.x.x._.x) : [3 x 3 x 64 x 64], [15 x 15 x 64 x *] -> [15 x 15 x 64 x *]
Validating --> model.arrayOfFunctions[8].b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> z.x._._.x._._.x.x._.res.x = Plus (z.x._._.x._._.x.x._.c, model.arrayOfFunctions[8].b) : [15 x 15 x 64 x *], [1 x 1 x 64] -> [15 x 15 x 64 x *]
Validating --> z.x._._.x._._.x.x = RectifiedLinear (z.x._._.x._._.x.x._.res.x) : [15 x 15 x 64 x *] -> [15 x 15 x 64 x *]
Validating --> _z.x._._.x._._.x = Pooling (z.x._._.x._._.x.x) : [15 x 15 x 64 x *] -> [7 x 7 x 64 x *]
Node 'model.arrayOfFunctions[11].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [256 x 7 x 7 x 64].
Node 'model.arrayOfFunctions[11].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[256 x 7 x 7 x 64] <- glorotUniform(seed=3, init dims=[256 x 3136], range=0.042058(0.042058*1.000000), onCPU=true.
)Validating --> z.x._._.x._._.x.PlusArgs[0] = Times (model.arrayOfFunctions[11].arrayOfFunctions[0].W, _z.x._._.x._._.x) : [256 x 7 x 7 x 64], [7 x 7 x 64 x *] -> [256 x *]
Validating --> model.arrayOfFunctions[11].arrayOfFunctions[0].b = LearnableParameter() :  -> [256]
Validating --> z.x._._.x._._.x = Plus (z.x._._.x._._.x.PlusArgs[0], model.arrayOfFunctions[11].arrayOfFunctions[0].b) : [256 x *], [256] -> [256 x *]
Validating --> z.x._._.x._ = RectifiedLinear (z.x._._.x._._.x) : [256 x *] -> [256 x *]
Validating --> _z.x._._.x = Dropout (z.x._._.x._) : [256 x *] -> [256 x *]
Node 'model.arrayOfFunctions[14].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [128 x 256].
Node 'model.arrayOfFunctions[14].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[128 x 256] <- glorotUniform(seed=2, init dims=[128 x 256], range=0.125000(0.125000*1.000000), onCPU=true.
)Validating --> z.x._._.x.PlusArgs[0] = Times (model.arrayOfFunctions[14].arrayOfFunctions[0].W, _z.x._._.x) : [128 x 256], [256 x *] -> [128 x *]
Validating --> model.arrayOfFunctions[14].arrayOfFunctions[0].b = LearnableParameter() :  -> [128]
Validating --> z.x._._.x = Plus (z.x._._.x.PlusArgs[0], model.arrayOfFunctions[14].arrayOfFunctions[0].b) : [128 x *], [128] -> [128 x *]
Validating --> z.x._ = RectifiedLinear (z.x._._.x) : [128 x *] -> [128 x *]
Validating --> z.x = Dropout (z.x._) : [128 x *] -> [128 x *]
Node 'model.arrayOfFunctions[17].W' (LearnableParameter operation) operation: Tensor shape was inferred as [10 x 128].
Node 'model.arrayOfFunctions[17].W' (LearnableParameter operation): Initializing Parameter[10 x 128] <- glorotUniform(seed=1, init dims=[10 x 128], range=0.208514(0.208514*1.000000), onCPU=true.
)Validating --> z.PlusArgs[0] = Times (model.arrayOfFunctions[17].W, z.x) : [10 x 128], [128 x *] -> [10 x *]
Validating --> model.arrayOfFunctions[17].b = LearnableParameter() :  -> [10]
Validating --> z = Plus (z.PlusArgs[0], model.arrayOfFunctions[17].b) : [10 x *], [10] -> [10 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, z) : [10 x *], [10 x *] -> [1]
Validating --> errs = ClassificationError (labels, z) : [10 x *], [10 x *] -> [1]
Validating --> inputs.inputs[2] = LearnableParameter() :  -> [1 x 1]
Validating --> top5Errs = ClassificationError (labels, z, inputs.inputs[2]) : [10 x *], [10 x *], [1 x 1] -> [1]

Validating network. 28 nodes to process in pass 2.


Validating network, final pass.

z.x._._.x._._.x.x._.x._.x.x._.x._.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 64, Kernel: 3 x 3 x 3, Map: 64, Stride: 1 x 1 x 3, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
z.x._._.x._._.x.x._.x._.x.x._.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 64, Output: 32 x 32 x 64, Kernel: 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 64, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
z.x._._.x._._.x.x._.x._.x: using cuDNN convolution engine for geometry: Input: 32 x 32 x 64, Output: 15 x 15 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
z.x._._.x._._.x.x._.x._.c: using cuDNN convolution engine for geometry: Input: 15 x 15 x 64, Output: 15 x 15 x 64, Kernel: 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 64, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
z.x._._.x._._.x.x._.c: using cuDNN convolution engine for geometry: Input: 15 x 15 x 64, Output: 15 x 15 x 64, Kernel: 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 64, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
_z.x._._.x._._.x: using cuDNN convolution engine for geometry: Input: 15 x 15 x 64, Output: 7 x 7 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.



Post-processing network complete.

12/09/2017 10:45:05: 
Model has 46 nodes. Using GPU 0.

12/09/2017 10:45:05: Training criterion:   ce = CrossEntropyWithSoftmax
12/09/2017 10:45:05: Evaluation criterion: errs = ClassificationError


Allocating matrices for forward and/or backward propagation.

Gradient Memory Aliasing: 14 are aliased.
	z.x._._.x._._.x.x._.x._.c (gradient) reuses z.x._._.x._._.x.x._.x._.res.x (gradient)
	z.x._._.x._._.x.x._.x._.x.x._.x._.c (gradient) reuses z.x._._.x._._.x.x._.x._.x.x._.x._.res.x (gradient)
	z.x._._.x._._.x.x._.x._.x.x._.c (gradient) reuses z.x._._.x._._.x.x._.x._.x.x._.res.x (gradient)
	z.x._._.x.PlusArgs[0] (gradient) reuses z.x._._.x (gradient)
	z.PlusArgs[0] (gradient) reuses z (gradient)
	z.x._._.x._._.x.PlusArgs[0] (gradient) reuses z.x._._.x._._.x (gradient)
	z.x._._.x._._.x.x._.c (gradient) reuses z.x._._.x._._.x.x._.res.x (gradient)

Memory Sharing: Out of 85 matrices, 58 are shared as 12, and 27 are not shared.

Here are the ones that share memory:
	{ model.arrayOfFunctions[1].W : [3 x 3 x 3 x 64] (gradient)
	  z.x._._.x._._.x.x._.x._.x.x._.x : [32 x 32 x 64 x *]
	  z.x._._.x._._.x.x._.x._.x.x._.x._.c : [32 x 32 x 64 x *] }
	{ z.x._._.x._._.x.x._.x._.x.x : [32 x 32 x 64 x *]
	  z.x._._.x._._.x.x._.x._.x.x._.c : [32 x 32 x 64 x *]
	  z.x._._.x._._.x.x._.x._.x.x._.x._.c : [32 x 32 x 64 x *] (gradient)
	  z.x._._.x._._.x.x._.x._.x.x._.x._.res.x : [32 x 32 x 64 x *]
	  z.x._._.x._._.x.x._.x._.x.x._.x._.res.x : [32 x 32 x 64 x *] (gradient) }
	{ _z.x._._.x._._.x : [7 x 7 x 64 x *]
	  model.arrayOfFunctions[1].b : [1 x 1 x 64] (gradient)
	  z.x._._.x._._.x.x._.c : [15 x 15 x 64 x *] (gradient)
	  z.x._._.x._._.x.x._.res.x : [15 x 15 x 64 x *]
	  z.x._._.x._._.x.x._.res.x : [15 x 15 x 64 x *] (gradient)
	  z.x._._.x._._.x.x._.x._.c : [15 x 15 x 64 x *] (gradient)
	  z.x._._.x._._.x.x._.x._.res.x : [15 x 15 x 64 x *]
	  z.x._._.x._._.x.x._.x._.res.x : [15 x 15 x 64 x *] (gradient)
	  z.x._._.x._._.x.x._.x._.x.x : [32 x 32 x 64 x *] (gradient)
	  z.x._._.x._._.x.x._.x._.x.x._.res.x : [32 x 32 x 64 x *]
	  z.x._._.x._._.x.x._.x._.x.x._.x : [32 x 32 x 64 x *] (gradient) }
	{ _z.x._._.x : [256 x *]
	  z.x._._.x._._.x : [256 x *]
	  z.x._._.x._._.x : [256 x *] (gradient)
	  z.x._._.x._._.x.PlusArgs[0] : [256 x *] (gradient)
	  z.x._._.x._._.x.x : [15 x 15 x 64 x *] (gradient)
	  z.x._._.x._._.x.x._.c : [15 x 15 x 64 x *]
	  z.x._._.x._._.x.x._.x : [15 x 15 x 64 x *] (gradient)
	  z.x._._.x._._.x.x._.x._.c : [15 x 15 x 64 x *]
	  z.x._._.x._._.x.x._.x._.x : [15 x 15 x 64 x *] (gradient)
	  z.x._._.x._._.x.x._.x._.x.x._.c : [32 x 32 x 64 x *] (gradient)
	  z.x._._.x._._.x.x._.x._.x.x._.res.x : [32 x 32 x 64 x *] (gradient) }
	{ model.arrayOfFunctions[3].W : [3 x 3 x 64 x 64] (gradient)
	  z.x._._.x._._.x.x._.x._.x : [15 x 15 x 64 x *] }
	{ model.arrayOfFunctions[6].W : [3 x 3 x 64 x 64] (gradient)
	  z.x._._.x._._.x.x._.x : [15 x 15 x 64 x *] }
	{ model.arrayOfFunctions[8].W : [3 x 3 x 64 x 64] (gradient)
	  z.x._._.x._._.x.x : [15 x 15 x 64 x *] }
	{ _z.x._._.x._._.x : [7 x 7 x 64 x *] (gradient)
	  model.arrayOfFunctions[6].b : [1 x 1 x 64] (gradient)
	  z.x._._.x._ : [256 x *]
	  z.x._._.x._._.x.PlusArgs[0] : [256 x *] }
	{ model.arrayOfFunctions[11].arrayOfFunctions[0].W : [256 x 7 x 7 x 64] (gradient)
	  z.x : [128 x *]
	  z.x._._.x : [128 x *]
	  z.x._._.x._ : [256 x *] (gradient) }
	{ _z.x._._.x : [256 x *] (gradient)
	  model.arrayOfFunctions[11].arrayOfFunctions[0].b : [256] (gradient)
	  z : [10 x *] (gradient)
	  z.PlusArgs[0] : [10 x *]
	  z.PlusArgs[0] : [10 x *] (gradient)
	  z.x._ : [128 x *] (gradient)
	  z.x._._.x.PlusArgs[0] : [128 x *] }
	{ model.arrayOfFunctions[14].arrayOfFunctions[0].W : [128 x 256] (gradient)
	  z.x._ : [128 x *] }
	{ model.arrayOfFunctions[3].b : [1 x 1 x 64] (gradient)
	  z : [10 x *]
	  z.x : [128 x *] (gradient)
	  z.x._._.x : [128 x *] (gradient)
	  z.x._._.x.PlusArgs[0] : [128 x *] (gradient) }

Here are the ones that don't share memory:
	{top5Errs : [1]}
	{z.x._._.x._._.x.x._.x._.x.x._.x._.x : [32 x 32 x 3 x *]}
	{model.arrayOfFunctions[17].W : [10 x 128] (gradient)}
	{model.arrayOfFunctions[14].arrayOfFunctions[0].b : [128] (gradient)}
	{model.arrayOfFunctions[8].b : [1 x 1 x 64] (gradient)}
	{model.arrayOfFunctions[17].b : [10] (gradient)}
	{ce : [1] (gradient)}
	{errs : [1]}
	{ce : [1]}
	{model.arrayOfFunctions[14].arrayOfFunctions[0].W : [128 x 256]}
	{inputs.inputs[2] : [1 x 1]}
	{model.arrayOfFunctions[11].arrayOfFunctions[0].W : [256 x 7 x 7 x 64]}
	{model.arrayOfFunctions[11].arrayOfFunctions[0].b : [256]}
	{model.arrayOfFunctions[8].b : [1 x 1 x 64]}
	{model.arrayOfFunctions[8].W : [3 x 3 x 64 x 64]}
	{model.arrayOfFunctions[6].b : [1 x 1 x 64]}
	{model.arrayOfFunctions[6].W : [3 x 3 x 64 x 64]}
	{model.arrayOfFunctions[1].b : [1 x 1 x 64]}
	{model.arrayOfFunctions[3].W : [3 x 3 x 64 x 64]}
	{model.arrayOfFunctions[3].b : [1 x 1 x 64]}
	{_z.x._._.x._._.x.x._.x._.x.x._.x._.x : [1]}
	{features : [32 x 32 x 3 x *]}
	{model.arrayOfFunctions[1].W : [3 x 3 x 3 x 64]}
	{model.arrayOfFunctions[17].W : [10 x 128]}
	{model.arrayOfFunctions[14].arrayOfFunctions[0].b : [128]}
	{model.arrayOfFunctions[17].b : [10]}
	{labels : [10 x *]}


12/09/2017 10:45:05: Training 949834 parameters in 14 out of 14 parameter tensors and 39 nodes with gradient:

12/09/2017 10:45:05: 	Node 'model.arrayOfFunctions[11].arrayOfFunctions[0].W' (LearnableParameter operation) : [256 x 7 x 7 x 64]
12/09/2017 10:45:05: 	Node 'model.arrayOfFunctions[11].arrayOfFunctions[0].b' (LearnableParameter operation) : [256]
12/09/2017 10:45:05: 	Node 'model.arrayOfFunctions[14].arrayOfFunctions[0].W' (LearnableParameter operation) : [128 x 256]
12/09/2017 10:45:05: 	Node 'model.arrayOfFunctions[14].arrayOfFunctions[0].b' (LearnableParameter operation) : [128]
12/09/2017 10:45:05: 	Node 'model.arrayOfFunctions[17].W' (LearnableParameter operation) : [10 x 128]
12/09/2017 10:45:05: 	Node 'model.arrayOfFunctions[17].b' (LearnableParameter operation) : [10]
12/09/2017 10:45:05: 	Node 'model.arrayOfFunctions[1].W' (LearnableParameter operation) : [3 x 3 x 3 x 64]
12/09/2017 10:45:05: 	Node 'model.arrayOfFunctions[1].b' (LearnableParameter operation) : [1 x 1 x 64]
12/09/2017 10:45:05: 	Node 'model.arrayOfFunctions[3].W' (LearnableParameter operation) : [3 x 3 x 64 x 64]
12/09/2017 10:45:05: 	Node 'model.arrayOfFunctions[3].b' (LearnableParameter operation) : [1 x 1 x 64]
12/09/2017 10:45:05: 	Node 'model.arrayOfFunctions[6].W' (LearnableParameter operation) : [3 x 3 x 64 x 64]
12/09/2017 10:45:05: 	Node 'model.arrayOfFunctions[6].b' (LearnableParameter operation) : [1 x 1 x 64]
12/09/2017 10:45:05: 	Node 'model.arrayOfFunctions[8].W' (LearnableParameter operation) : [3 x 3 x 64 x 64]
12/09/2017 10:45:05: 	Node 'model.arrayOfFunctions[8].b' (LearnableParameter operation) : [1 x 1 x 64]

12/09/2017 10:45:05: No PreCompute nodes found, or all already computed. Skipping pre-computation step.
Setting dropout rate to 0.5.

12/09/2017 10:45:05: Starting Epoch 1: learning rate per sample = 0.001563  effective momentum = 0.000000  momentum as time constant = 0.0 samples

12/09/2017 10:45:05: Starting minibatch loop.
(GPU): creating curand object with seed 0
(GPU): creating curand object with seed 1
12/09/2017 10:45:06:  Epoch[ 1 of 3]-Minibatch[   1-  16, 25.00%]: ce = 2.29828167 * 1024; errs = 88.965% * 1024; time = 0.7901s; samplesPerSecond = 1296.0
12/09/2017 10:45:06:  Epoch[ 1 of 3]-Minibatch[  17-  32, 50.00%]: ce = 2.29885483 * 1024; errs = 87.598% * 1024; time = 0.2738s; samplesPerSecond = 3740.2
12/09/2017 10:45:06:  Epoch[ 1 of 3]-Minibatch[  33-  48, 75.00%]: ce = 2.28731537 * 1024; errs = 87.500% * 1024; time = 0.2731s; samplesPerSecond = 3749.6
12/09/2017 10:45:07:  Epoch[ 1 of 3]-Minibatch[  49-  64, 100.00%]: ce = 2.25384617 * 1024; errs = 84.375% * 1024; time = 0.2724s; samplesPerSecond = 3759.7
12/09/2017 10:45:07: Finished Epoch[ 1 of 3]: [Training] ce = 2.28457451 * 4096; errs = 87.109% * 4096; totalSamplesSeen = 4096; learningRatePerSample = 0.0015625; epochTime=1.6132s
12/09/2017 10:45:07: SGD: Saving checkpoint model '/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNet_CIFAR10_DataAug@release_gpu/Models/ConvNet_CIFAR10_DataAug.1'

12/09/2017 10:45:07: Starting Epoch 2: learning rate per sample = 0.001563  effective momentum = 0.000000  momentum as time constant = 0.0 samples

12/09/2017 10:45:07: Starting minibatch loop.
(GPU): creating curand object with seed 2
(GPU): creating curand object with seed 3
12/09/2017 10:45:07:  Epoch[ 2 of 3]-Minibatch[   1-  16, 25.00%]: ce = 2.21283221 * 1024; errs = 82.910% * 1024; time = 0.2827s; samplesPerSecond = 3622.6
12/09/2017 10:45:07:  Epoch[ 2 of 3]-Minibatch[  17-  32, 50.00%]: ce = 2.18532777 * 1024; errs = 83.105% * 1024; time = 0.2720s; samplesPerSecond = 3764.4
12/09/2017 10:45:08:  Epoch[ 2 of 3]-Minibatch[  33-  48, 75.00%]: ce = 2.16456890 * 1024; errs = 82.812% * 1024; time = 0.2718s; samplesPerSecond = 3767.5
12/09/2017 10:45:08:  Epoch[ 2 of 3]-Minibatch[  49-  64, 100.00%]: ce = 2.15522480 * 1024; errs = 81.641% * 1024; time = 0.2718s; samplesPerSecond = 3767.5
12/09/2017 10:45:08: Finished Epoch[ 2 of 3]: [Training] ce = 2.17948842 * 4096; errs = 82.617% * 4096; totalSamplesSeen = 8192; learningRatePerSample = 0.0015625; epochTime=1.09931s
12/09/2017 10:45:08: SGD: Saving checkpoint model '/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNet_CIFAR10_DataAug@release_gpu/Models/ConvNet_CIFAR10_DataAug.2'

12/09/2017 10:45:08: Starting Epoch 3: learning rate per sample = 0.001563  effective momentum = 0.000000  momentum as time constant = 0.0 samples

12/09/2017 10:45:08: Starting minibatch loop.
(GPU): creating curand object with seed 4
(GPU): creating curand object with seed 5
12/09/2017 10:45:08:  Epoch[ 3 of 3]-Minibatch[   1-  16, 25.00%]: ce = 2.10880828 * 1024; errs = 77.441% * 1024; time = 0.2828s; samplesPerSecond = 3620.9
12/09/2017 10:45:09:  Epoch[ 3 of 3]-Minibatch[  17-  32, 50.00%]: ce = 2.14064002 * 1024; errs = 79.199% * 1024; time = 0.2714s; samplesPerSecond = 3772.9
12/09/2017 10:45:09:  Epoch[ 3 of 3]-Minibatch[  33-  48, 75.00%]: ce = 2.10304165 * 1024; errs = 77.246% * 1024; time = 0.2713s; samplesPerSecond = 3773.8
12/09/2017 10:45:09:  Epoch[ 3 of 3]-Minibatch[  49-  64, 100.00%]: ce = 2.12486410 * 1024; errs = 79.883% * 1024; time = 0.2725s; samplesPerSecond = 3757.6
12/09/2017 10:45:09: Finished Epoch[ 3 of 3]: [Training] ce = 2.11933851 * 4096; errs = 78.442% * 4096; totalSamplesSeen = 12288; learningRatePerSample = 0.0015625; epochTime=1.09907s
12/09/2017 10:45:09: SGD: Saving checkpoint model '/tmp/cntk-test-20171209080859.615414/Examples/Image/Classification/ConvNet_CIFAR_ConvNet_CIFAR10_DataAug@release_gpu/Models/ConvNet_CIFAR10_DataAug'

12/09/2017 10:45:09: Action "train" complete.


12/09/2017 10:45:09: ##############################################################################
12/09/2017 10:45:09: #                                                                            #
12/09/2017 10:45:09: # Eval command (eval action)                                                 #
12/09/2017 10:45:09: #                                                                            #
12/09/2017 10:45:09: ##############################################################################


Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ClassificationError()
	top5Errs = ClassificationError()

Validating network. 46 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> model.arrayOfFunctions[17].W = LearnableParameter() :  -> [10 x 128]
Validating --> model.arrayOfFunctions[14].arrayOfFunctions[0].W = LearnableParameter() :  -> [128 x 256]
Validating --> model.arrayOfFunctions[11].arrayOfFunctions[0].W = LearnableParameter() :  -> [256 x 7 x 7 x 64]
Validating --> model.arrayOfFunctions[8].W = LearnableParameter() :  -> [3 x 3 x 64 x 64]
Validating --> model.arrayOfFunctions[6].W = LearnableParameter() :  -> [3 x 3 x 64 x 64]
Validating --> model.arrayOfFunctions[3].W = LearnableParameter() :  -> [3 x 3 x 64 x 64]
Validating --> model.arrayOfFunctions[1].W = LearnableParameter() :  -> [3 x 3 x 3 x 64]
Validating --> _z.x._._.x._._.x.x._.x._.x.x._.x._.x = LearnableParameter() :  -> [1]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *1]
Validating --> z.x._._.x._._.x.x._.x._.x.x._.x._.x = ElementTimes (_z.x._._.x._._.x.x._.x._.x.x._.x._.x, features) : [1], [32 x 32 x 3 x *1] -> [32 x 32 x 3 x *1]
Validating --> z.x._._.x._._.x.x._.x._.x.x._.x._.c = Convolution (model.arrayOfFunctions[1].W, z.x._._.x._._.x.x._.x._.x.x._.x._.x) : [3 x 3 x 3 x 64], [32 x 32 x 3 x *1] -> [32 x 32 x 64 x *1]
Validating --> model.arrayOfFunctions[1].b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> z.x._._.x._._.x.x._.x._.x.x._.x._.res.x = Plus (z.x._._.x._._.x.x._.x._.x.x._.x._.c, model.arrayOfFunctions[1].b) : [32 x 32 x 64 x *1], [1 x 1 x 64] -> [32 x 32 x 64 x *1]
Validating --> z.x._._.x._._.x.x._.x._.x.x._.x = RectifiedLinear (z.x._._.x._._.x.x._.x._.x.x._.x._.res.x) : [32 x 32 x 64 x *1] -> [32 x 32 x 64 x *1]
Validating --> z.x._._.x._._.x.x._.x._.x.x._.c = Convolution (model.arrayOfFunctions[3].W, z.x._._.x._._.x.x._.x._.x.x._.x) : [3 x 3 x 64 x 64], [32 x 32 x 64 x *1] -> [32 x 32 x 64 x *1]
Validating --> model.arrayOfFunctions[3].b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> z.x._._.x._._.x.x._.x._.x.x._.res.x = Plus (z.x._._.x._._.x.x._.x._.x.x._.c, model.arrayOfFunctions[3].b) : [32 x 32 x 64 x *1], [1 x 1 x 64] -> [32 x 32 x 64 x *1]
Validating --> z.x._._.x._._.x.x._.x._.x.x = RectifiedLinear (z.x._._.x._._.x.x._.x._.x.x._.res.x) : [32 x 32 x 64 x *1] -> [32 x 32 x 64 x *1]
Validating --> z.x._._.x._._.x.x._.x._.x = Pooling (z.x._._.x._._.x.x._.x._.x.x) : [32 x 32 x 64 x *1] -> [15 x 15 x 64 x *1]
Validating --> z.x._._.x._._.x.x._.x._.c = Convolution (model.arrayOfFunctions[6].W, z.x._._.x._._.x.x._.x._.x) : [3 x 3 x 64 x 64], [15 x 15 x 64 x *1] -> [15 x 15 x 64 x *1]
Validating --> model.arrayOfFunctions[6].b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> z.x._._.x._._.x.x._.x._.res.x = Plus (z.x._._.x._._.x.x._.x._.c, model.arrayOfFunctions[6].b) : [15 x 15 x 64 x *1], [1 x 1 x 64] -> [15 x 15 x 64 x *1]
Validating --> z.x._._.x._._.x.x._.x = RectifiedLinear (z.x._._.x._._.x.x._.x._.res.x) : [15 x 15 x 64 x *1] -> [15 x 15 x 64 x *1]
Validating --> z.x._._.x._._.x.x._.c = Convolution (model.arrayOfFunctions[8].W, z.x._._.x._._.x.x._.x) : [3 x 3 x 64 x 64], [15 x 15 x 64 x *1] -> [15 x 15 x 64 x *1]
Validating --> model.arrayOfFunctions[8].b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> z.x._._.x._._.x.x._.res.x = Plus (z.x._._.x._._.x.x._.c, model.arrayOfFunctions[8].b) : [15 x 15 x 64 x *1], [1 x 1 x 64] -> [15 x 15 x 64 x *1]
Validating --> z.x._._.x._._.x.x = RectifiedLinear (z.x._._.x._._.x.x._.res.x) : [15 x 15 x 64 x *1] -> [15 x 15 x 64 x *1]
Validating --> _z.x._._.x._._.x = Pooling (z.x._._.x._._.x.x) : [15 x 15 x 64 x *1] -> [7 x 7 x 64 x *1]
Validating --> z.x._._.x._._.x.PlusArgs[0] = Times (model.arrayOfFunctions[11].arrayOfFunctions[0].W, _z.x._._.x._._.x) : [256 x 7 x 7 x 64], [7 x 7 x 64 x *1] -> [256 x *1]
Validating --> model.arrayOfFunctions[11].arrayOfFunctions[0].b = LearnableParameter() :  -> [256]
Validating --> z.x._._.x._._.x = Plus (z.x._._.x._._.x.PlusArgs[0], model.arrayOfFunctions[11].arrayOfFunctions[0].b) : [256 x *1], [256] -> [256 x *1]
Validating --> z.x._._.x._ = RectifiedLinear (z.x._._.x._._.x) : [256 x *1] -> [256 x *1]
Validating --> _z.x._._.x = Dropout (z.x._._.x._) : [256 x *1] -> [256 x *1]
Validating --> z.x._._.x.PlusArgs[0] = Times (model.arrayOfFunctions[14].arrayOfFunctions[0].W, _z.x._._.x) : [128 x 256], [256 x *1] -> [128 x *1]
Validating --> model.arrayOfFunctions[14].arrayOfFunctions[0].b = LearnableParameter() :  -> [128]
Validating --> z.x._._.x = Plus (z.x._._.x.PlusArgs[0], model.arrayOfFunctions[14].arrayOfFunctions[0].b) : [128 x *1], [128] -> [128 x *1]
Validating --> z.x._ = RectifiedLinear (z.x._._.x) : [128 x *1] -> [128 x *1]
Validating --> z.x = Dropout (z.x._) : [128 x *1] -> [128 x *1]
Validating --> z.PlusArgs[0] = Times (model.arrayOfFunctions[17].W, z.x) : [10 x 128], [128 x *1] -> [10 x *1]
Validating --> model.arrayOfFunctions[17].b = LearnableParameter() :  -> [10]
Validating --> z = Plus (z.PlusArgs[0], model.arrayOfFunctions[17].b) : [10 x *1], [10] -> [10 x *1]
Validating --> ce = CrossEntropyWithSoftmax (labels, z) : [10 x *1], [10 x *1] -> [1]
Validating --> errs = ClassificationError (labels, z) : [10 x *1], [10 x *1] -> [1]
Validating --> inputs.inputs[2] = LearnableParameter() :  -> [1 x 1]
Validating --> top5Errs = ClassificationError (labels, z, inputs.inputs[2]) : [10 x *1], [10 x *1], [1 x 1] -> [1]

Validating network. 28 nodes to process in pass 2.


Validating network, final pass.

z.x._._.x._._.x.x._.x._.x.x._.x._.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 64, Kernel: 3 x 3 x 3, Map: 64, Stride: 1 x 1 x 3, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
z.x._._.x._._.x.x._.x._.x.x._.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 64, Output: 32 x 32 x 64, Kernel: 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 64, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
z.x._._.x._._.x.x._.x._.x: using cuDNN convolution engine for geometry: Input: 32 x 32 x 64, Output: 15 x 15 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
z.x._._.x._._.x.x._.x._.c: using cuDNN convolution engine for geometry: Input: 15 x 15 x 64, Output: 15 x 15 x 64, Kernel: 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 64, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
z.x._._.x._._.x.x._.c: using cuDNN convolution engine for geometry: Input: 15 x 15 x 64, Output: 15 x 15 x 64, Kernel: 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 64, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
_z.x._._.x._._.x: using cuDNN convolution engine for geometry: Input: 15 x 15 x 64, Output: 7 x 7 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.



Post-processing network complete.



Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 46 matrices, 25 are shared as 3, and 21 are not shared.

Here are the ones that share memory:
	{ _z.x._._.x : [256 x *1]
	  _z.x._._.x._._.x : [7 x 7 x 64 x *1]
	  z : [10 x *1]
	  z.x : [128 x *1]
	  z.x._._.x : [128 x *1]
	  z.x._._.x._._.x : [256 x *1]
	  z.x._._.x._._.x.x._.x : [15 x 15 x 64 x *1]
	  z.x._._.x._._.x.x._.x._.x.x._.x._.x : [32 x 32 x 3 x *1] }
	{ z.x._._.x._._.x.x._.res.x : [15 x 15 x 64 x *1]
	  z.x._._.x._._.x.x._.x._.res.x : [15 x 15 x 64 x *1]
	  z.x._._.x._._.x.x._.x._.x : [15 x 15 x 64 x *1]
	  z.x._._.x._._.x.x._.x._.x.x._.res.x : [32 x 32 x 64 x *1]
	  z.x._._.x._._.x.x._.x._.x.x._.x : [32 x 32 x 64 x *1]
	  z.x._._.x._._.x.x._.x._.x.x._.x._.c : [32 x 32 x 64 x *1] }
	{ z.PlusArgs[0] : [10 x *1]
	  z.x._ : [128 x *1]
	  z.x._._.x.PlusArgs[0] : [128 x *1]
	  z.x._._.x._ : [256 x *1]
	  z.x._._.x._._.x.PlusArgs[0] : [256 x *1]
	  z.x._._.x._._.x.x : [15 x 15 x 64 x *1]
	  z.x._._.x._._.x.x._.c : [15 x 15 x 64 x *1]
	  z.x._._.x._._.x.x._.x._.c : [15 x 15 x 64 x *1]
	  z.x._._.x._._.x.x._.x._.x.x : [32 x 32 x 64 x *1]
	  z.x._._.x._._.x.x._.x._.x.x._.c : [32 x 32 x 64 x *1]
	  z.x._._.x._._.x.x._.x._.x.x._.x._.res.x : [32 x 32 x 64 x *1] }

Here are the ones that don't share memory:
	{ce : [1]}
	{inputs.inputs[2] : [1 x 1]}
	{features : [32 x 32 x 3 x *1]}
	{labels : [10 x *1]}
	{top5Errs : [1]}
	{model.arrayOfFunctions[11].arrayOfFunctions[0].b : [256]}
	{model.arrayOfFunctions[11].arrayOfFunctions[0].W : [256 x 7 x 7 x 64]}
	{model.arrayOfFunctions[14].arrayOfFunctions[0].W : [128 x 256]}
	{model.arrayOfFunctions[14].arrayOfFunctions[0].b : [128]}
	{model.arrayOfFunctions[17].b : [10]}
	{model.arrayOfFunctions[17].W : [10 x 128]}
	{model.arrayOfFunctions[1].b : [1 x 1 x 64]}
	{model.arrayOfFunctions[1].W : [3 x 3 x 3 x 64]}
	{model.arrayOfFunctions[3].b : [1 x 1 x 64]}
	{model.arrayOfFunctions[3].W : [3 x 3 x 64 x 64]}
	{model.arrayOfFunctions[6].b : [1 x 1 x 64]}
	{model.arrayOfFunctions[6].W : [3 x 3 x 64 x 64]}
	{model.arrayOfFunctions[8].b : [1 x 1 x 64]}
	{model.arrayOfFunctions[8].W : [3 x 3 x 64 x 64]}
	{errs : [1]}
	{_z.x._._.x._._.x.x._.x._.x.x._.x._.x : [1]}

12/09/2017 10:45:12: Minibatch[1-20]: errs = 71.820% * 10000; top5Errs = 21.120% * 10000
12/09/2017 10:45:12: Final Results: Minibatch[1-20]: errs = 71.820% * 10000; top5Errs = 21.120% * 10000

12/09/2017 10:45:12: Action "eval" complete.

12/09/2017 10:45:12: __COMPLETED__