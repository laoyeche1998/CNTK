CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2690 v3 @ 2.60GHz
    Hardware threads: 12
    Total Memory: 57700428 kB
-------------------------------------------------------------------
=== Running /home/ubuntu/workspace/build/1bitsgd/release/bin/cntk configFile=/home/ubuntu/workspace/Tests/EndToEndTests/Examples/Image/Deprecated/MNIST/03_ConvBatchNorm_ndl//03_ConvBatchNorm_ndl_deprecated.cntk currentDirectory=/home/ubuntu/workspace/Examples/Image/DataSets/MNIST RunDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Deprecated/MNIST_03_ConvBatchNorm_ndl@release_gpu DataDir=/home/ubuntu/workspace/Examples/Image/DataSets/MNIST ConfigDir=/home/ubuntu/workspace/Tests/EndToEndTests/Examples/Image/Deprecated/MNIST/03_ConvBatchNorm_ndl/ OutputDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Deprecated/MNIST_03_ConvBatchNorm_ndl@release_gpu DeviceId=0 timestamping=true train=[SGD=[maxEpochs=3]] imageLayout="" stderr=-
CNTK 2.3.1+ (HEAD b130d7, Dec  8 2017 01:52:00) at 2017/12/09 10:58:11

/home/ubuntu/workspace/build/1bitsgd/release/bin/cntk  configFile=/home/ubuntu/workspace/Tests/EndToEndTests/Examples/Image/Deprecated/MNIST/03_ConvBatchNorm_ndl//03_ConvBatchNorm_ndl_deprecated.cntk  currentDirectory=/home/ubuntu/workspace/Examples/Image/DataSets/MNIST  RunDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Deprecated/MNIST_03_ConvBatchNorm_ndl@release_gpu  DataDir=/home/ubuntu/workspace/Examples/Image/DataSets/MNIST  ConfigDir=/home/ubuntu/workspace/Tests/EndToEndTests/Examples/Image/Deprecated/MNIST/03_ConvBatchNorm_ndl/  OutputDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Deprecated/MNIST_03_ConvBatchNorm_ndl@release_gpu  DeviceId=0  timestamping=true  train=[SGD=[maxEpochs=3]]  imageLayout=""  stderr=-
Changed current directory to /home/ubuntu/workspace/Examples/Image/DataSets/MNIST
12/09/2017 10:58:11: Redirecting stderr to file -_train_test.log
12/09/2017 10:58:11: -------------------------------------------------------------------
12/09/2017 10:58:11: Build info: 

12/09/2017 10:58:11: 		Built time: Dec  8 2017 01:46:20
12/09/2017 10:58:11: 		Last modified date: Wed Nov 15 09:27:10 2017
12/09/2017 10:58:11: 		Build type: release
12/09/2017 10:58:11: 		Build target: GPU
12/09/2017 10:58:11: 		With 1bit-SGD: yes
12/09/2017 10:58:11: 		With ASGD: yes
12/09/2017 10:58:11: 		Math lib: mkl
12/09/2017 10:58:11: 		CUDA version: 9.0.0
12/09/2017 10:58:11: 		CUDNN version: 7.0.4
12/09/2017 10:58:11: 		Build Branch: HEAD
12/09/2017 10:58:11: 		Build SHA1: b130d7735044ce6697bfb963af91445bee740c73
12/09/2017 10:58:11: 		MPI distribution: Open MPI
12/09/2017 10:58:11: 		MPI version: 1.10.7
12/09/2017 10:58:11: -------------------------------------------------------------------
12/09/2017 10:58:11: -------------------------------------------------------------------
12/09/2017 10:58:11: GPU info:

12/09/2017 10:58:11: 		Device[0]: cores = 3072; computeCapability = 5.2; type = "Tesla M60"; total memory = 8123 MB; free memory = 8112 MB
12/09/2017 10:58:11: -------------------------------------------------------------------

Configuration After Processing and Variable Resolution:

configparameters: 03_ConvBatchNorm_ndl_deprecated.cntk:command=train:test
configparameters: 03_ConvBatchNorm_ndl_deprecated.cntk:ConfigDir=/home/ubuntu/workspace/Tests/EndToEndTests/Examples/Image/Deprecated/MNIST/03_ConvBatchNorm_ndl/
configparameters: 03_ConvBatchNorm_ndl_deprecated.cntk:currentDirectory=/home/ubuntu/workspace/Examples/Image/DataSets/MNIST
configparameters: 03_ConvBatchNorm_ndl_deprecated.cntk:DataDir=/home/ubuntu/workspace/Examples/Image/DataSets/MNIST
configparameters: 03_ConvBatchNorm_ndl_deprecated.cntk:deviceId=0
configparameters: 03_ConvBatchNorm_ndl_deprecated.cntk:imageLayout=
configparameters: 03_ConvBatchNorm_ndl_deprecated.cntk:ModelDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Deprecated/MNIST_03_ConvBatchNorm_ndl@release_gpu/Models
configparameters: 03_ConvBatchNorm_ndl_deprecated.cntk:modelPath=/tmp/cntk-test-20171209080859.615414/Examples/Image/Deprecated/MNIST_03_ConvBatchNorm_ndl@release_gpu/Models/03_ConvBatchNorm
configparameters: 03_ConvBatchNorm_ndl_deprecated.cntk:numMBsToShowResult=500
configparameters: 03_ConvBatchNorm_ndl_deprecated.cntk:OutputDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Deprecated/MNIST_03_ConvBatchNorm_ndl@release_gpu
configparameters: 03_ConvBatchNorm_ndl_deprecated.cntk:precision=float
configparameters: 03_ConvBatchNorm_ndl_deprecated.cntk:RootDir=..
configparameters: 03_ConvBatchNorm_ndl_deprecated.cntk:RunDir=/tmp/cntk-test-20171209080859.615414/Examples/Image/Deprecated/MNIST_03_ConvBatchNorm_ndl@release_gpu
configparameters: 03_ConvBatchNorm_ndl_deprecated.cntk:stderr=-
configparameters: 03_ConvBatchNorm_ndl_deprecated.cntk:test=[
    action = "test"
    minibatchSize = 1024
    modelPath=/tmp/cntk-test-20171209080859.615414/Examples/Image/Deprecated/MNIST_03_ConvBatchNorm_ndl@release_gpu/Models/03_ConvBatchNorm
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/ubuntu/workspace/Examples/Image/DataSets/MNIST/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]

configparameters: 03_ConvBatchNorm_ndl_deprecated.cntk:timestamping=true
configparameters: 03_ConvBatchNorm_ndl_deprecated.cntk:traceLevel=1
configparameters: 03_ConvBatchNorm_ndl_deprecated.cntk:train=[
    action = "train"
    NDLNetworkBuilder = [
        imageLayout = "cudnn"
        initOnCPUOnly=true
        ndlMacros = "/home/ubuntu/workspace/Tests/EndToEndTests/Examples/Image/Deprecated/MNIST/03_ConvBatchNorm_ndl//../Macros.ndl"
        networkDescription = "/home/ubuntu/workspace/Tests/EndToEndTests/Examples/Image/Deprecated/MNIST/03_ConvBatchNorm_ndl//03_ConvBatchNorm.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.5:0.1
        momentumPerMB = 0.9
        maxEpochs = 2
        batchNormalizationBlendTimeConstant=0:1#INF
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/ubuntu/workspace/Examples/Image/DataSets/MNIST/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
] [SGD=[maxEpochs=3]]

12/09/2017 10:58:11: Commands: train test
12/09/2017 10:58:11: precision = "float"

12/09/2017 10:58:11: ##############################################################################
12/09/2017 10:58:11: #                                                                            #
12/09/2017 10:58:11: # train command (train action)                                               #
12/09/2017 10:58:11: #                                                                            #
12/09/2017 10:58:11: ##############################################################################

12/09/2017 10:58:11: 
Creating virgin network.
NDLBuilder Using GPU 0

h1.t Times operation: For legacy compatibility, the sample layout of left input (h1.W LearnableParameter operation) was patched to [128 x 7 x 7 x 32] (from [128 x 1568])
conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 1 x 1 x 16, Stride: 1 x 1 x 1, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
Using CNTK batch normalization engine.
pool1: using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
conv2.c.c.c: using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 1 x 1 x 32, Stride: 1 x 1 x 16, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
Using CNTK batch normalization engine.
pool2: using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
Using CNTK batch normalization engine.
12/09/2017 10:58:12: 
Model has 39 nodes. Using GPU 0.

12/09/2017 10:58:12: Training criterion:   ce = CrossEntropyWithSoftmax
12/09/2017 10:58:12: Evaluation criterion: errs = ClassificationError


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 64 matrices, 33 are shared as 10, and 31 are not shared.

Here are the ones that share memory:
	{ h1.W : [128 x 7 x 7 x 32] (gradient)
	  h1.bn : [128 x *] (gradient)
	  ol.t : [10 x *]
	  ol.z : [10 x 1 x *] (gradient) }
	{ conv2.c.c.sc : [32 x 1] (gradient)
	  h1.bn : [128 x *]
	  h1.t : [128 x *] (gradient)
	  h1.y : [128 x *] (gradient)
	  ol.z : [10 x 1 x *] }
	{ conv1.c.c.c : [28 x 28 x 16 x *] (gradient)
	  conv1.y : [28 x 28 x 16 x *] (gradient)
	  conv2.c.c.c : [14 x 14 x 32 x *] (gradient)
	  conv2.c.c.y : [14 x 14 x 32 x *]
	  conv2.y : [14 x 14 x 32 x *] (gradient)
	  h1.t : [128 x *] }
	{ conv1.c.c.sc : [16 x 1] (gradient)
	  pool1 : [14 x 14 x 16 x *] }
	{ conv1.c.W : [16 x 25] (gradient)
	  conv1.y : [28 x 28 x 16 x *] }
	{ conv1.c.c.b : [16 x 1] (gradient)
	  conv2.c.c.y : [14 x 14 x 32 x *] (gradient)
	  pool1 : [14 x 14 x 16 x *] (gradient)
	  pool2 : [7 x 7 x 32 x *] }
	{ h1.b : [128 x 1] (gradient)
	  ol.t : [10 x *] (gradient) }
	{ conv2.c.W : [32 x 400] (gradient)
	  conv2.y : [14 x 14 x 32 x *] }
	{ conv2.c.c.b : [32 x 1] (gradient)
	  h1.y : [128 x *]
	  pool2 : [7 x 7 x 32 x *] (gradient) }
	{ conv1.c.c.y : [28 x 28 x 16 x *]
	  conv1.c.c.y : [28 x 28 x 16 x *] (gradient)
	  conv2.c.c.c : [14 x 14 x 32 x *] }

Here are the ones that don't share memory:
	{ce : [1]}
	{ol.b : [10 x 1] (gradient)}
	{conv1.c.c.c : [28 x 28 x 16 x *]}
	{ce : [1] (gradient)}
	{h1.sc : [128 x 1] (gradient)}
	{featScaled : [28 x 28 x 1 x *]}
	{ol.W : [10 x 128] (gradient)}
	{errs : [1]}
	{featScale : [1 x 1]}
	{labels : [10 x *]}
	{conv1.c.W : [16 x 25]}
	{conv1.c.c.b : [16 x 1]}
	{conv1.c.c.sc : [16 x 1]}
	{conv1.c.c.m : [16 x 1]}
	{conv1.c.c.v : [16 x 1]}
	{conv1.c.c.y.run_sample_count : [1]}
	{conv2.c.W : [32 x 400]}
	{h1.sc : [128 x 1]}
	{conv2.c.c.b : [32 x 1]}
	{conv2.c.c.sc : [32 x 1]}
	{conv2.c.c.m : [32 x 1]}
	{conv2.c.c.v : [32 x 1]}
	{conv2.c.c.y.run_sample_count : [1]}
	{h1.W : [128 x 7 x 7 x 32]}
	{h1.b : [128 x 1]}
	{h1.m : [128 x 1]}
	{h1.v : [128 x 1]}
	{h1.bn.run_sample_count : [1]}
	{ol.W : [10 x 128]}
	{ol.b : [10 x 1]}
	{features : [28 x 28 x 1 x *]}


12/09/2017 10:58:12: Training 215546 parameters in 11 out of 11 parameter tensors and 25 nodes with gradient:

12/09/2017 10:58:12: 	Node 'conv1.c.W' (LearnableParameter operation) : [16 x 25]
12/09/2017 10:58:12: 	Node 'conv1.c.c.b' (LearnableParameter operation) : [16 x 1]
12/09/2017 10:58:12: 	Node 'conv1.c.c.sc' (LearnableParameter operation) : [16 x 1]
12/09/2017 10:58:12: 	Node 'conv2.c.W' (LearnableParameter operation) : [32 x 400]
12/09/2017 10:58:12: 	Node 'conv2.c.c.b' (LearnableParameter operation) : [32 x 1]
12/09/2017 10:58:12: 	Node 'conv2.c.c.sc' (LearnableParameter operation) : [32 x 1]
12/09/2017 10:58:12: 	Node 'h1.W' (LearnableParameter operation) : [128 x 7 x 7 x 32]
12/09/2017 10:58:12: 	Node 'h1.b' (LearnableParameter operation) : [128 x 1]
12/09/2017 10:58:12: 	Node 'h1.sc' (LearnableParameter operation) : [128 x 1]
12/09/2017 10:58:12: 	Node 'ol.W' (LearnableParameter operation) : [10 x 128]
12/09/2017 10:58:12: 	Node 'ol.b' (LearnableParameter operation) : [10 x 1]

12/09/2017 10:58:12: No PreCompute nodes found, or all already computed. Skipping pre-computation step.

12/09/2017 10:58:12: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 303.7 samples

12/09/2017 10:58:12: Starting minibatch loop.
12/09/2017 10:58:14:  Epoch[ 1 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.17457375 * 16000; errs = 5.375% * 16000; time = 1.9088s; samplesPerSecond = 8382.3
12/09/2017 10:58:15:  Epoch[ 1 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.08630711 * 16000; errs = 2.688% * 16000; time = 1.1656s; samplesPerSecond = 13726.7
12/09/2017 10:58:17:  Epoch[ 1 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.06740515 * 16000; errs = 2.138% * 16000; time = 1.1613s; samplesPerSecond = 13778.0
12/09/2017 10:58:17: Finished Epoch[ 1 of 3]: [Training] ce = 0.09842978 * 60000; errs = 3.075% * 60000; totalSamplesSeen = 60000; learningRatePerSample = 0.015625; epochTime=4.76972s
12/09/2017 10:58:17: SGD: Saving checkpoint model '/tmp/cntk-test-20171209080859.615414/Examples/Image/Deprecated/MNIST_03_ConvBatchNorm_ndl@release_gpu/Models/03_ConvBatchNorm.1'
Setting batch normalization blend time constant to inf.

12/09/2017 10:58:17: Starting Epoch 2: learning rate per sample = 0.003125  effective momentum = 0.900000  momentum as time constant = 303.7 samples

12/09/2017 10:58:17: Starting minibatch loop.
12/09/2017 10:58:18:  Epoch[ 2 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.02405183 * 16000; errs = 0.756% * 16000; time = 0.6780s; samplesPerSecond = 23598.7
12/09/2017 10:58:18:  Epoch[ 2 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.02023477 * 16000; errs = 0.581% * 16000; time = 0.6792s; samplesPerSecond = 23558.2
12/09/2017 10:58:19:  Epoch[ 2 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.02361970 * 16000; errs = 0.731% * 16000; time = 0.6774s; samplesPerSecond = 23620.8
12/09/2017 10:58:20: Finished Epoch[ 2 of 3]: [Training] ce = 0.02267644 * 60000; errs = 0.700% * 60000; totalSamplesSeen = 120000; learningRatePerSample = 0.003125; epochTime=2.54949s
12/09/2017 10:58:20: SGD: Saving checkpoint model '/tmp/cntk-test-20171209080859.615414/Examples/Image/Deprecated/MNIST_03_ConvBatchNorm_ndl@release_gpu/Models/03_ConvBatchNorm.2'

12/09/2017 10:58:20: Starting Epoch 3: learning rate per sample = 0.003125  effective momentum = 0.900000  momentum as time constant = 303.7 samples

12/09/2017 10:58:20: Starting minibatch loop.
12/09/2017 10:58:20:  Epoch[ 3 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.01647257 * 16000; errs = 0.525% * 16000; time = 0.6776s; samplesPerSecond = 23612.6
12/09/2017 10:58:21:  Epoch[ 3 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.01647383 * 16000; errs = 0.450% * 16000; time = 0.6771s; samplesPerSecond = 23629.9
12/09/2017 10:58:22:  Epoch[ 3 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.01794143 * 16000; errs = 0.550% * 16000; time = 0.6795s; samplesPerSecond = 23547.6
12/09/2017 10:58:22: Finished Epoch[ 3 of 3]: [Training] ce = 0.01752854 * 60000; errs = 0.532% * 60000; totalSamplesSeen = 180000; learningRatePerSample = 0.003125; epochTime=2.54909s
12/09/2017 10:58:22: SGD: Saving checkpoint model '/tmp/cntk-test-20171209080859.615414/Examples/Image/Deprecated/MNIST_03_ConvBatchNorm_ndl@release_gpu/Models/03_ConvBatchNorm'

12/09/2017 10:58:22: Action "train" complete.


12/09/2017 10:58:22: ##############################################################################
12/09/2017 10:58:22: #                                                                            #
12/09/2017 10:58:22: # test command (test action)                                                 #
12/09/2017 10:58:22: #                                                                            #
12/09/2017 10:58:22: ##############################################################################


Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ClassificationError()
	ol.z = Plus()

Validating network. 39 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 7 x 7 x 32]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 400]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *1]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [16 x 25], [28 x 28 x 1 x *1] -> [28 x 28 x 16 x *1]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.v = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y.run_sample_count = LearnableParameter() :  -> [1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.v, conv1.c.c.y.run_sample_count) : [28 x 28 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [28 x 28 x 16 x *1]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [28 x 28 x 16 x *1] -> [28 x 28 x 16 x *1]
Validating --> pool1 = MaxPooling (conv1.y) : [28 x 28 x 16 x *1] -> [14 x 14 x 16 x *1]
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 400], [14 x 14 x 16 x *1] -> [14 x 14 x 32 x *1]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.v = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.y.run_sample_count = LearnableParameter() :  -> [1]
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.v, conv2.c.c.y.run_sample_count) : [14 x 14 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [14 x 14 x 32 x *1]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [14 x 14 x 32 x *1] -> [14 x 14 x 32 x *1]
Validating --> pool2 = MaxPooling (conv2.y) : [14 x 14 x 32 x *1] -> [7 x 7 x 32 x *1]
Validating --> h1.t = Times (h1.W, pool2) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *1] -> [128 x *1]
Validating --> h1.sc = LearnableParameter() :  -> [128 x 1]
Validating --> h1.b = LearnableParameter() :  -> [128 x 1]
Validating --> h1.m = LearnableParameter() :  -> [128 x 1]
Validating --> h1.v = LearnableParameter() :  -> [128 x 1]
Validating --> h1.bn.run_sample_count = LearnableParameter() :  -> [1]
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.v, h1.bn.run_sample_count) : [128 x *1], [128 x 1], [128 x 1], [128 x 1], [128 x 1], [1] -> [128 x *1]
Validating --> h1.y = RectifiedLinear (h1.bn) : [128 x *1] -> [128 x *1]
Validating --> ol.t = Times (ol.W, h1.y) : [10 x 128], [128 x *1] -> [10 x *1]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.z = Plus (ol.t, ol.b) : [10 x *1], [10 x 1] -> [10 x 1 x *1]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.z) : [10 x *1], [10 x 1 x *1] -> [1]
Validating --> errs = ClassificationError (labels, ol.z) : [10 x *1], [10 x 1 x *1] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.

conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 1 x 1 x 16, Stride: 1 x 1 x 1, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
Using CNTK batch normalization engine.
pool1: using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
conv2.c.c.c: using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 1 x 1 x 32, Stride: 1 x 1 x 16, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
Using CNTK batch normalization engine.
pool2: using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
Using CNTK batch normalization engine.



Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 39 matrices, 14 are shared as 3, and 25 are not shared.

Here are the ones that share memory:
	{ conv1.c.c.c : [28 x 28 x 16 x *1]
	  conv1.y : [28 x 28 x 16 x *1]
	  conv2.c.c.y : [14 x 14 x 32 x *1] }
	{ conv1.c.c.y : [28 x 28 x 16 x *1]
	  conv2.c.c.c : [14 x 14 x 32 x *1]
	  conv2.y : [14 x 14 x 32 x *1]
	  h1.t : [128 x *1]
	  h1.y : [128 x *1]
	  ol.z : [10 x 1 x *1] }
	{ featScaled : [28 x 28 x 1 x *1]
	  h1.bn : [128 x *1]
	  ol.t : [10 x *1]
	  pool1 : [14 x 14 x 16 x *1]
	  pool2 : [7 x 7 x 32 x *1] }

Here are the ones that don't share memory:
	{conv1.c.c.b : [16 x 1]}
	{ce : [1]}
	{conv1.c.c.m : [16 x 1]}
	{conv1.c.c.sc : [16 x 1]}
	{conv1.c.c.v : [16 x 1]}
	{conv1.c.W : [16 x 25]}
	{conv1.c.c.y.run_sample_count : [1]}
	{conv2.c.c.b : [32 x 1]}
	{conv2.c.c.m : [32 x 1]}
	{conv2.c.c.sc : [32 x 1]}
	{conv2.c.c.v : [32 x 1]}
	{conv2.c.W : [32 x 400]}
	{conv2.c.c.y.run_sample_count : [1]}
	{featScale : [1 x 1]}
	{features : [28 x 28 x 1 x *1]}
	{h1.b : [128 x 1]}
	{h1.bn.run_sample_count : [1]}
	{h1.m : [128 x 1]}
	{h1.sc : [128 x 1]}
	{h1.v : [128 x 1]}
	{h1.W : [128 x 7 x 7 x 32]}
	{labels : [10 x *1]}
	{ol.b : [10 x 1]}
	{ol.W : [10 x 128]}
	{errs : [1]}

12/09/2017 10:58:23: Minibatch[1-10]: errs = 0.730% * 10000; ce = 0.02247046 * 10000
12/09/2017 10:58:23: Final Results: Minibatch[1-10]: errs = 0.730% * 10000; ce = 0.02247046 * 10000; perplexity = 1.02272483

12/09/2017 10:58:23: Action "test" complete.

12/09/2017 10:58:23: __COMPLETED__